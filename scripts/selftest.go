package main

import (
	"fmt"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"strings"
	"time"
)

func main() {
	fmt.Println("üß™ –°–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ YouTube Bot —Å –ø—Ä–æ–∫—Å–∏")
	fmt.Println("====================================")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	loadEnvFile(".env")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
	useProxy := strings.ToLower(os.Getenv("USE_PROXY")) == "true"
	proxyURL := os.Getenv("PROXY_URL")
	if proxyURL == "" {
		proxyURL = "socks5h://127.0.0.1:1080"
	}

	fmt.Printf("USE_PROXY = %t\n", useProxy)
	fmt.Printf("PROXY_URL = %s\n", proxyURL)

	// –¢–µ—Å—Ç 1: HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏
	fmt.Println("\nüåê –¢–µ—Å—Ç 1: HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏")
	client := &http.Client{
		Timeout: 10 * time.Second,
	}

	if useProxy {
		// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –ø—Ä–æ–∫—Å–∏
		proxyURLParsed, err := parseProxyURL(proxyURL)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏ URL: %v\n", err)
		} else {
			transport := &http.Transport{
				Proxy: http.ProxyURL(proxyURLParsed),
			}
			client.Transport = transport
			fmt.Printf("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–æ–∫—Å–∏: %s\n", proxyURL)
		}
	} else {
		fmt.Println("‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
	}

	// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google
	resp, err := client.Get("https://www.google.com")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google: %v\n", err)
	} else {
		resp.Body.Close()
		fmt.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google: %d\n", resp.StatusCode)
	}

	// –¢–µ—Å—Ç 2: yt-dlp —Å –ø—Ä–æ–∫—Å–∏
	fmt.Println("\nüé¨ –¢–µ—Å—Ç 2: yt-dlp —Å –ø—Ä–æ–∫—Å–∏")
	cmd := []string{"yt-dlp", "-s", "https://www.youtube.com/watch?v=dQw4w9WgXcQ"}
	
	if useProxy {
		cmd = append([]string{"yt-dlp", "--proxy", proxyURL, "-s"}, cmd[2:]...)
		fmt.Printf("yt-dlp dry-run cmd: %s\n", strings.Join(cmd, " "))
	} else {
		fmt.Printf("yt-dlp dry-run cmd: %s\n", strings.Join(cmd, " "))
	}

	output, err := exec.Command(cmd[0], cmd[1:]...).CombinedOutput()
	if err != nil {
		fmt.Printf("‚ùå yt-dlp failed: %v\n", err)
		fmt.Printf("Output: %s\n", string(output))
	} else {
		fmt.Printf("‚úÖ yt-dlp ok, bytes: %d\n", len(output))
	}

	// –¢–µ—Å—Ç 3: curl —Å –ø—Ä–æ–∫—Å–∏
	fmt.Println("\nüîó –¢–µ—Å—Ç 3: curl —Å –ø—Ä–æ–∫—Å–∏")
	curlCmd := []string{"curl", "-s", "--connect-timeout", "10", "--max-time", "30"}
	
	if useProxy {
		curlCmd = append(curlCmd, "--proxy", proxyURL)
	}
	curlCmd = append(curlCmd, "https://www.youtube.com")

	curlOutput, err := exec.Command(curlCmd[0], curlCmd[1:]...).CombinedOutput()
	if err != nil {
		fmt.Printf("‚ùå curl failed: %v\n", err)
	} else {
		fmt.Printf("‚úÖ curl ok, bytes: %d\n", len(curlOutput))
	}

	// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	fmt.Println("\nüîß –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	envVars := []string{"USE_PROXY", "PROXY_URL", "NO_PROXY", "ALL_PROXY", "HTTP_PROXY", "HTTPS_PROXY"}
	for _, envVar := range envVars {
		value := os.Getenv(envVar)
		if value != "" {
			fmt.Printf("‚úÖ %s = %s\n", envVar, value)
		} else {
			fmt.Printf("‚ÑπÔ∏è %s –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n", envVar)
		}
	}

	fmt.Println("\nüéâ –°–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}

// loadEnvFile –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
func loadEnvFile(filename string) error {
	content, err := os.ReadFile(filename)
	if err != nil {
		return err
	}

	lines := strings.Split(string(content), "\n")
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		parts := strings.SplitN(line, "=", 2)
		if len(parts) == 2 {
			key := strings.TrimSpace(parts[0])
			value := strings.TrimSpace(parts[1])
			os.Setenv(key, value)
		}
	}

	return nil
}

// parseProxyURL –ø–∞—Ä—Å–∏—Ç URL –ø—Ä–æ–∫—Å–∏
func parseProxyURL(proxyURL string) (*url.URL, error) {
	return url.Parse(proxyURL)
}
