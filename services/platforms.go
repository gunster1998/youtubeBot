package services

import (
	"fmt"
	"log"
	"regexp"
	"strings"
)

// PlatformType –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
type PlatformType string

const (
	PlatformYouTube     PlatformType = "youtube"
	PlatformYouTubeShorts PlatformType = "youtube_shorts"
	PlatformUnknown     PlatformType = "unknown"
)

// PlatformInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
type PlatformInfo struct {
	Type        PlatformType
	VideoID     string
	DisplayName string
	Icon        string
	Supported   bool
}

// PlatformDetector –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL
type PlatformDetector struct {
	patterns map[PlatformType][]string
}

// NewPlatformDetector —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º
func NewPlatformDetector() *PlatformDetector {
	return &PlatformDetector{
		patterns: map[PlatformType][]string{
			PlatformYouTube: {
				`youtube\.com/watch\?v=([a-zA-Z0-9_-]{11})`,
				`youtube\.com/embed/([a-zA-Z0-9_-]{11})`,
				`youtube\.com/v/([a-zA-Z0-9_-]{11})`,
				`youtu\.be/([a-zA-Z0-9_-]{11})`,
			},
			PlatformYouTubeShorts: {
				`youtube\.com/shorts/([a-zA-Z0-9_-]{11})`,
			},
		},
	}
}

// DetectPlatform –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL
func (pd *PlatformDetector) DetectPlatform(url string) *PlatformInfo {
	url = strings.TrimSpace(url)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	for platformType, patterns := range pd.patterns {
		for _, pattern := range patterns {
			re := regexp.MustCompile(pattern)
			matches := re.FindStringSubmatch(url)
			if len(matches) > 1 {
				videoID := matches[1]
				return &PlatformInfo{
					Type:        platformType,
					VideoID:     videoID,
					DisplayName: pd.getDisplayName(platformType),
					Icon:        pd.getIcon(platformType),
					Supported:   pd.isSupported(platformType),
				}
			}
		}
	}
	
	return &PlatformInfo{
		Type:        PlatformUnknown,
		VideoID:     "",
		DisplayName: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
		Icon:        "‚ùì",
		Supported:   false,
	}
}

// getDisplayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func (pd *PlatformDetector) getDisplayName(platformType PlatformType) string {
	names := map[PlatformType]string{
		PlatformYouTube:       "YouTube",
		PlatformYouTubeShorts: "YouTube Shorts",
		PlatformUnknown:       "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
	}
	return names[platformType]
}

// getIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func (pd *PlatformDetector) getIcon(platformType PlatformType) string {
	icons := map[PlatformType]string{
		PlatformYouTube:       "üé¨",
		PlatformYouTubeShorts: "üé¨",
		PlatformUnknown:       "‚ùì",
	}
	return icons[platformType]
}

// isSupported –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
func (pd *PlatformDetector) isSupported(platformType PlatformType) bool {
	supported := map[PlatformType]bool{
		PlatformYouTube:       true,
		PlatformYouTubeShorts: true,
		PlatformUnknown:       false,
	}
	return supported[platformType]
}

// IsValidURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –ª—é–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func (pd *PlatformDetector) IsValidURL(url string) bool {
	info := pd.DetectPlatform(url)
	return info.Supported && info.VideoID != ""
}

// GetSupportedPlatforms –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
func (pd *PlatformDetector) GetSupportedPlatforms() []PlatformInfo {
	var platforms []PlatformInfo
	for platformType := range pd.patterns {
		if pd.isSupported(platformType) {
			platforms = append(platforms, PlatformInfo{
				Type:        platformType,
				VideoID:     "",
				DisplayName: pd.getDisplayName(platformType),
				Icon:        pd.getIcon(platformType),
				Supported:   true,
			})
		}
	}
	return platforms
}

// GetYtDlpArgs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã yt-dlp –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func (pd *PlatformDetector) GetYtDlpArgs(platformType PlatformType) []string {
	args := []string{
		"--no-playlist",
		"--no-check-certificates",
		"--max-filesize", "2G",
		"--socket-timeout", "60",
		"--retries", "5",
	}
	
	switch platformType {
	case PlatformYouTube, PlatformYouTubeShorts:
		// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è YouTube
		args = append(args, "--format", "best[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]+bestaudio/best")
		
	default:
		// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = append(args, "--format", "best")
	}
	
	return args
}

// GetVideoTitle –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –∫—ç—à–∞
func (pd *PlatformDetector) GetVideoTitle(platformType PlatformType, videoID string) string {
	titles := map[PlatformType]string{
		PlatformYouTube:       fmt.Sprintf("YouTube Video %s", videoID),
		PlatformYouTubeShorts: fmt.Sprintf("YouTube Short %s", videoID),
		PlatformUnknown:       fmt.Sprintf("Video %s", videoID),
	}
	return titles[platformType]
}

// LogPlatformInfo –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
func (pd *PlatformDetector) LogPlatformInfo(info *PlatformInfo, url string) {
	log.Printf("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", info.Icon, info.DisplayName)
	log.Printf("   URL: %s", url)
	log.Printf("   Video ID: %s", info.VideoID)
	log.Printf("   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: %v", info.Supported)
}
