package services

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"
	"time"
	"strconv"
	
	"youtubeBot/utils"
)

// VideoFormat –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ
type VideoFormat struct {
	ID         string
	Extension  string
	Resolution string
	FPS        string
	HasAudio   bool
	FileSize   string
}

// VideoMetadata –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
type VideoMetadata struct {
	Title       string
	Author      string
	Duration    string
	Views       string
	Description string
	Thumbnail   string
	UploadDate  string
	OriginalURL string
}

// YouTubeService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube
type YouTubeService struct {
	downloadDir string
}

// getYtDlpPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ yt-dlp
func getYtDlpPath() string {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
	if _, err := exec.LookPath("/usr/local/bin/yt-dlp"); err == nil {
		return "/usr/local/bin/yt-dlp"
	}
	
	// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å
	if _, err := exec.LookPath("yt-dlp"); err == nil {
		return "yt-dlp"
	}
	
	return "/usr/local/bin/yt-dlp" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// getProxyArgs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏ –¥–ª—è yt-dlp
func getProxyArgs() []string {
	var args []string
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º USE_PROXY —Ñ–ª–∞–≥
	useProxy := strings.ToLower(os.Getenv("USE_PROXY")) == "true"
	if !useProxy {
		log.Printf("üåê –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω (USE_PROXY=false)")
		return args
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º PROXY_URL (–Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±)
	if proxyURL := os.Getenv("PROXY_URL"); proxyURL != "" {
		args = append(args, "--proxy", proxyURL)
		log.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PROXY_URL: %s", proxyURL)
	} else if allProxy := os.Getenv("ALL_PROXY"); allProxy != "" {
		args = append(args, "--proxy", allProxy)
		log.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ALL_PROXY: %s", allProxy)
	} else if httpProxy := os.Getenv("HTTP_PROXY"); httpProxy != "" {
		args = append(args, "--proxy", httpProxy)
		log.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP_PROXY: %s", httpProxy)
	} else if httpsProxy := os.Getenv("HTTPS_PROXY"); httpsProxy != "" {
		args = append(args, "--proxy", httpsProxy)
		log.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS_PROXY: %s", httpsProxy)
	} else if socksProxy := os.Getenv("SOCKS_PROXY"); socksProxy != "" {
		args = append(args, "--proxy", socksProxy)
		log.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SOCKS_PROXY: %s", socksProxy)
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω—Ç–∏-429 –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	args = append(args, "--sleep-requests", "1")
	args = append(args, "--sleep-interval", "1")
	args = append(args, "--max-sleep-interval", "3")
	
	return args
}

// NewYouTubeService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä YouTubeService
func NewYouTubeService(downloadDir string) *YouTubeService {
	return &YouTubeService{
		downloadDir: downloadDir,
	}
}

// GetVideoFormats –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ
func (s *YouTubeService) GetVideoFormats(url string) ([]VideoFormat, error) {
	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è: %s", url)
	log.Printf("üöÄ –ó–∞–ø—É—Å–∫ yt-dlp –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ...")

	var formats []VideoFormat
	var lastErr error
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
	err := utils.RetryWithBackoff(func() error {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º --list-formats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
		ctx, cancel := context.WithTimeout(context.Background(), 120*time.Second)
		defer cancel()

		log.Printf("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 120 —Å–µ–∫—É–Ω–¥")

		// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
		proxyArgs := getProxyArgs()
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–æ–∫—Å–∏ (—É–ø—Ä–æ—â–∞–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
		args := []string{
			"--list-formats",
			"--no-playlist",
			"--no-check-certificates",
			"--no-warnings",
			// –£–±–∏—Ä–∞–µ–º --quiet –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–≤–æ–¥–∞
			// –£–±–∏—Ä–∞–µ–º --extractor-args –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
		args = append(args, proxyArgs...)
		args = append(args, url)
		
		cmd := exec.CommandContext(ctx, getYtDlpPath(), args...)

		output, err := cmd.CombinedOutput()
		if err != nil {
			if ctx.Err() == context.DeadlineExceeded {
				return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ (120 —Å–µ–∫) - –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
			}
			log.Printf("‚ùå yt-dlp –æ—à–∏–±–∫–∞: %v", err)
			log.Printf("üìã –í—ã–≤–æ–¥ yt-dlp: %s", string(output))
			return fmt.Errorf("–æ—à–∏–±–∫–∞ yt-dlp: %v", err)
		}
		
		// –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		parsedFormats, parseErr := s.parseVideoFormats(string(output))
		if parseErr != nil {
			return parseErr
		}
		
		formats = parsedFormats
		return nil
	}, 3, 2*time.Second) // 3 –ø–æ–ø—ã—Ç–∫–∏ —Å –±–∞–∑–æ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã
	
	if err != nil {
		lastErr = err
		log.Printf("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫: %v", err)
		return nil, lastErr
	}

	log.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d —Ñ–æ—Ä–º–∞—Ç–æ–≤, %d —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å Telegram", len(formats), len(s.filterTelegramCompatibleFormats(formats)))
	return s.filterTelegramCompatibleFormats(formats), nil
}

// parseVideoFormats –ø–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ yt-dlp –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤
func (s *YouTubeService) parseVideoFormats(output string) ([]VideoFormat, error) {
	log.Printf("üìã –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ yt-dlp")
	log.Printf("üîç –°—ã—Ä–æ–π –≤—ã–≤–æ–¥ yt-dlp:\n%s", output)

	// –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ yt-dlp
	var allFormats []VideoFormat
	lines := strings.Split(output, "\n")

	log.Printf("üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –≤—ã–≤–æ–¥–µ: %d", len(lines))
	
	startParsing := false
	headerFound := false

	for i, line := range lines {
		line = strings.TrimSpace(line)
		
		log.Printf("üîç –°—Ç—Ä–æ–∫–∞ %d: '%s'", i+1, line)

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
		if line == "" {
			continue
		}

		// –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "Available formats for" –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
		if strings.Contains(line, "Available formats for") || strings.Contains(line, "ID  EXT") || 
		   strings.Contains(line, "ID EXT") || strings.Contains(line, "format code") {
			startParsing = true
			headerFound = true
			log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: '%s'", line)
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
		if strings.Contains(line, "---") {
			continue
		}

			// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å ID)
		if startParsing && regexp.MustCompile(`^\d+`).MatchString(line) {
			parts := strings.Fields(line)
			log.Printf("üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏: %s (—á–∞—Å—Ç–µ–π: %d)", line, len(parts))
			
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
			if len(parts) < 4 {
				log.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: %s (—á–∞—Å—Ç–µ–π: %d)", line, len(parts))
				continue
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç (–Ω–µ —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
			if parts[1] == "audio" || parts[1] == "mp4" || parts[1] == "webm" || parts[1] == "mov" {
				log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç: %s %s %s", parts[0], parts[1], parts[2])
			} else {
				log.Printf("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ—Ñ–æ—Ä–º–∞—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É: %s", line)
				continue
			}
			
			if len(parts) >= 4 {
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º storyboard —Ñ–æ—Ä–º–∞—Ç—ã
				if strings.HasPrefix(parts[0], "sb") {
					log.Printf("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é storyboard —Ñ–æ—Ä–º–∞—Ç: %s", parts[0])
					continue
				}

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –ø–æ –∫–æ–ª–æ–Ω–∫–µ CH (–∫–∞–Ω–∞–ª—ã)
				hasAudio := false
				if len(parts) >= 5 {
					// –ï—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ CH –µ—Å—Ç—å —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –∞—É–¥–∏–æ
					if channels, err := strconv.Atoi(parts[4]); err == nil && channels > 0 {
						hasAudio = true
						log.Printf("üéµ –ù–∞–π–¥–µ–Ω—ã –∞—É–¥–∏–æ –∫–∞–Ω–∞–ª—ã: %d", channels)
					}
				}
				
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
				if !hasAudio {
					hasAudio = !strings.Contains(line, "video only")
				}
				
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è YouTube
				if !hasAudio && strings.Contains(line, "mp4") {
					// –î–ª—è MP4 —Ñ–æ—Ä–º–∞—Ç–æ–≤ YouTube —á–∞—Å—Ç–æ –µ—Å—Ç—å –∞—É–¥–∏–æ
					if !strings.Contains(line, "video only") && !strings.Contains(line, "audio only") {
						hasAudio = true
						log.Printf("üéµ MP4 —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ 'video only' - —Å—á–∏—Ç–∞—é —á—Ç–æ –µ—Å—Ç—å –∞—É–¥–∏–æ")
					}
				}
				
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ "video only" - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∞—É–¥–∏–æ –ù–ï–¢
				if strings.Contains(line, "video only") {
					hasAudio = false
					log.Printf("üîá –ù–∞–π–¥–µ–Ω–æ 'video only' - –∞—É–¥–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
				}
				
				log.Printf("üîç –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –¥–ª—è %s: hasAudio=%v, —Å—Ç—Ä–æ–∫–∞='%s'", parts[0], hasAudio, line)
				
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞
				formatType := parts[1] // EXT –∫–æ–ª–æ–Ω–∫–∞
				log.Printf("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞: '%s' –¥–ª—è ID %s", formatType, parts[0])
				
				if formatType == "audio" {
					// –≠—Ç–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç
					formatType = "audio"
					hasAudio = true
					log.Printf("üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç: ID %s", parts[0])
				} else if strings.Contains(line, "audio only") {
					// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞—É–¥–∏–æ
					formatType = "audio"
					hasAudio = true
					log.Printf("üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç (–ø–æ —Ç–µ–∫—Å—Ç—É): ID %s", parts[0])
				} else if strings.Contains(line, "webm") && strings.Contains(line, "audio") {
					// WebM –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
					formatType = "audio"
					hasAudio = true
					log.Printf("üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω WebM –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç: ID %s - –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ MP3", parts[0])
				}

				format := VideoFormat{
					ID:         parts[0],
					Extension:  formatType, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø
					Resolution: parts[2],
					FPS:        parts[3],
					HasAudio:   hasAudio,
				}
				
				log.Printf("üìù –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ID=%s, Extension='%s', Resolution=%s, HasAudio=%v", 
					format.ID, format.Extension, format.Resolution, format.HasAudio)

				// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
				// –ò—â–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö (yt-dlp –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫)
				format.FileSize = ""
				for i := 5; i < len(parts); i++ {
					if strings.Contains(parts[i], "MiB") || strings.Contains(parts[i], "GiB") || 
					   strings.Contains(parts[i], "KiB") || strings.Contains(parts[i], "B") {
						format.FileSize = parts[i]
						log.Printf("üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %s (–∫–æ–ª–æ–Ω–∫–∞ %d)", parts[i], i)
						break
					}
				}
				
				if format.FileSize == "" {
					log.Printf("‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ: %s", line)
				}

				// –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–æ—Ä–º–∞—Ç—ã (–ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞)
				if format.Extension == "audio" {
					// –î–ª—è –∞—É–¥–∏–æ: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ (–Ω–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è)
					isDuplicate := false
					for _, existing := range allFormats {
						if existing.Extension == "audio" {
							// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π - —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
							if existing.FileSize == format.FileSize {
								isDuplicate = true
								log.Printf("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç: %s (—Ä–∞–∑–º–µ—Ä: %s)", format.ID, format.FileSize)
								break
							}
							// –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π (–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
							if existing.Resolution == format.Resolution {
								if s.isBetterAudioQuality(format, existing) {
									// –ó–∞–º–µ–Ω—è–µ–º —Ö—É–¥—à–∏–π –Ω–∞ –ª—É—á—à–∏–π
									log.Printf("üîÑ –ó–∞–º–µ–Ω—è—é —Ö—É–¥—à–∏–π –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç %s –Ω–∞ –ª—É—á—à–∏–π %s –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è %s", 
										existing.ID, format.ID, format.Resolution)
									// –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –≤ —Å–ø–∏—Å–∫–µ
									for i, f := range allFormats {
										if f.ID == existing.ID {
											allFormats[i] = format
											break
										}
									}
									goto nextFormat
								} else {
									// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö—É–¥—à–∏–π
									log.Printf("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Ö—É–¥—à–∏–π –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç %s –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è %s", 
										format.ID, format.Resolution)
									goto nextFormat
								}
							}
						}
					}
					if isDuplicate {
						continue
					}
				} else {
					// –í–†–ï–ú–ï–ù–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
					// –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∑–≤—É–∫—É –æ–±—Ä–∞—Ç–Ω–æ
					/*
					if !format.HasAudio {
						log.Printf("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞: %s (%s)", format.ID, format.Resolution)
						goto nextFormat
					}
					*/
					
					log.Printf("‚úÖ –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: %s (%s) - %s (–∞—É–¥–∏–æ: %v)", 
						format.ID, format.Resolution, format.FileSize, format.HasAudio)
				}

				allFormats = append(allFormats, format)
				log.Printf("üìπ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç: %s %s %s (–∞—É–¥–∏–æ: %v, —Ä–∞–∑–º–µ—Ä: %s)",
					format.ID, format.Resolution, format.Extension, format.HasAudio, format.FileSize)
			nextFormat:
				continue
			} else {
				log.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: %s (—á–∞—Å—Ç–µ–π: %d)", line, len(parts))
			}
		}
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
	log.Printf("üîç –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏):")
	var audioCount, videoWithAudioCount, videoWithoutAudioCount int
	for _, f := range allFormats {
		log.Printf("  - %s: %s %s (–∞—É–¥–∏–æ: %v, —Ä–∞–∑–º–µ—Ä: %s)", 
			f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
		
		if f.Extension == "audio" {
			audioCount++
		} else if f.HasAudio {
			videoWithAudioCount++
		} else {
			videoWithoutAudioCount++
		}
	}
	log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %d –∞—É–¥–∏–æ, %d –≤–∏–¥–µ–æ —Å–æ –∑–≤—É–∫–æ–º, %d –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞", 
		audioCount, videoWithAudioCount, videoWithoutAudioCount)
	
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	if videoWithAudioCount == 0 {
		log.Printf("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ –∑–≤—É–∫–æ–º!")
		log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã:")
		for _, f := range allFormats {
			if f.Extension != "audio" {
				log.Printf("  üé• %s: %s %s (–∞—É–¥–∏–æ: %v, —Ä–∞–∑–º–µ—Ä: %s)", 
					f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à–ª–∏ —Ñ–æ—Ä–º–∞—Ç—ã
	if len(allFormats) == 0 {
		log.Printf("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞!")
		log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ yt-dlp –≤—ã—à–µ")
		if !headerFound {
			log.Printf("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		}
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram
	telegramFormats := s.filterTelegramCompatibleFormats(allFormats)

	log.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d —Ñ–æ—Ä–º–∞—Ç–æ–≤, %d —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å Telegram", len(allFormats), len(telegramFormats))
	return telegramFormats, nil
}

// filterTelegramCompatibleFormats —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram
func (s *YouTubeService) filterTelegramCompatibleFormats(formats []VideoFormat) []VideoFormat {
	var compatible []VideoFormat

	log.Printf("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è %d —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram", len(formats))

	for _, format := range formats {
		log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–æ—Ä–º–∞—Ç %s: %s %s (–∞—É–¥–∏–æ: %v, —Ä–∞–∑–º–µ—Ä: %s)", 
			format.ID, format.Resolution, format.Extension, format.HasAudio, format.FileSize)
		
		// Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
		if s.isTelegramCompatible(format) {
			compatible = append(compatible, format)
			log.Printf("‚úÖ –§–æ—Ä–º–∞—Ç %s –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é", format.ID)
		} else {
			log.Printf("‚ùå –§–æ—Ä–º–∞—Ç %s –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é", format.ID)
		}
	}

	log.Printf("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: %d –∏–∑ %d —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å Telegram", len(compatible), len(formats))
	return compatible
}

// isTelegramCompatible –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ —Å Telegram
func (s *YouTubeService) isTelegramCompatible(format VideoFormat) bool {
	// –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã (webm –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ mp3)
	if format.Extension == "audio" {
		log.Printf("‚úÖ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç %s —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Telegram: %s (—Ä–∞–∑–º–µ—Ä: %s) - –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ MP3", 
			format.ID, format.Resolution, format.FileSize)
		return true
	}
	
	// –î–ª—è –≤–∏–¥–µ–æ: —Ç–æ–ª—å–∫–æ MP4 –∏ MOV
	if format.Extension != "mp4" && format.Extension != "mov" {
		log.Printf("‚ùå –§–æ—Ä–º–∞—Ç %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: %s", format.ID, format.Extension)
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 2GB)
	if format.FileSize != "" {
		if s.isFileSizeTooLarge(format.FileSize) {
			log.Printf("üìè –§–æ—Ä–º–∞—Ç %s –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 2GB: %s", format.ID, format.FileSize)
			return false
		}
	}

	log.Printf("‚úÖ –§–æ—Ä–º–∞—Ç %s —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Telegram: %s %s (—Ä–∞–∑–º–µ—Ä: %s)", 
		format.ID, format.Resolution, format.Extension, format.FileSize)
	return true
}

// isFileSizeTooLarge –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–∏–º–∏—Ç (2GB)
func (s *YouTubeService) isFileSizeTooLarge(fileSize string) bool {
	// –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ 2GB
	const maxSizeMB = 2048 // 2GB –≤ MB
	
	// –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "‚âà301.82MiB", "52.91MiB", "1.2GiB", "500KiB")
	fileSize = strings.TrimSpace(fileSize)
	
	// –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã ‚âà, ~, –µ—Å–ª–∏ –µ—Å—Ç—å
	fileSize = strings.TrimPrefix(fileSize, "‚âà")
	fileSize = strings.TrimPrefix(fileSize, "~")
	fileSize = strings.TrimSpace(fileSize)
	
	// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
	if strings.Contains(fileSize, "GiB") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		sizeStr := strings.Replace(fileSize, "GiB", "", 1)
		if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
			isTooLarge := size > 2.0 // –ú–∞–∫—Å–∏–º—É–º 2GB
			log.Printf("üìè –†–∞–∑–º–µ—Ä –≤ –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö: %s (%.2f GB) - %s", fileSize, size, 
				func() string { if isTooLarge { return "–ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 2GB" } else { return "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ 2GB" } }())
			return isTooLarge
		}
	}
	
	// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
	if strings.Contains(fileSize, "MiB") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		sizeStr := strings.Replace(fileSize, "MiB", "", 1)
		if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
			isTooLarge := size > float64(maxSizeMB)
				log.Printf("üìè –†–∞–∑–º–µ—Ä –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö: %s (%.2f MB) - %s", fileSize, size, 
		func() string { if isTooLarge { return "–ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 2GB" } else { return "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ 2GB" } }())
	return isTooLarge
		}
	}
	
	// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö - —Ç–æ—á–Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç
	if strings.Contains(fileSize, "KiB") {
		log.Printf("üìè –†–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö: %s - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞", fileSize)
		return false
	}
	
	// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º
	if strings.Contains(fileSize, "B") && !strings.Contains(fileSize, "KiB") && !strings.Contains(fileSize, "MiB") && !strings.Contains(fileSize, "GiB") {
		sizeStr := strings.Replace(fileSize, "B", "", 1)
		if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
			isTooLarge := size > float64(maxSizeMB*1024*1024) // 50MB –≤ –±–∞–π—Ç–∞—Ö
			log.Printf("üìè –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö: %s (%.0f B) - %s", fileSize, size, 
				func() string { if isTooLarge { return "–ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç" } else { return "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞" } }())
			return isTooLarge
		}
	}
	
	// –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–ª—É—á—à–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è)
	log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %s", fileSize)
	return true
}

// DownloadVideo —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube
func (s *YouTubeService) DownloadVideo(url string) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(s.downloadDir, 0755); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	log.Printf("üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: %s", url)

	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
	proxyArgs := getProxyArgs()
	
	// –ö–æ–º–∞–Ω–¥–∞ yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª—É—á—à–µ–≥–æ MP4 —Ñ–æ—Ä–º–∞—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 2GB)
	args := []string{
		"--format", "best[ext=mp4]/best", // –õ—É—á—à–∏–π MP4 –∏–ª–∏ –ª—é–±–æ–π –ª—É—á—à–∏–π
		"--output", filepath.Join(s.downloadDir, "%(id)s.%(ext)s"), // –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ ID
		"--no-playlist",           // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ
		"--no-check-certificates", // –£—Å–∫–æ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
		"--max-filesize", "2G",    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 2GB
		"--socket-timeout", "60",  // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
		"--retries", "5",          // –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
	args = append(args, proxyArgs...)
	args = append(args, url)
	
	// –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Minute)
	defer cancel()
	
	cmd := exec.CommandContext(ctx, getYtDlpPath(), args...)

	log.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: %s", strings.Join(cmd.Args, " "))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ yt-dlp: %s", string(output))
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ yt-dlp: %v", err)
	}

	log.Printf("‚úÖ yt-dlp –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: %s", string(output))

	// –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞)
	videoFile, err := s.findDownloadedFileOld(url)
	if err != nil {
		return "", err
	}

	return videoFile, nil
}

// DownloadVideoWithFormat —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func (s *YouTubeService) DownloadVideoWithFormat(videoURL, formatID string) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(s.downloadDir, 0755); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	// –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ ID –∏ —Ñ–æ—Ä–º–∞—Ç–∞
	if err := s.cleanVideoFiles(videoURL, formatID); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –≤–∏–¥–µ–æ: %v", err)
	}

	log.Printf("üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ %s –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s + –∞—É–¥–∏–æ", videoURL, formatID)

	var videoFile string
	var lastErr error
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	err := utils.RetryWithBackoff(func() error {
		// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
		proxyArgs := getProxyArgs()
		
		// –ö–æ–º–∞–Ω–¥–∞ yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ + –∞—É–¥–∏–æ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 2GB)
		args := []string{
			"--format", formatID + "+bestaudio/best", // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ + –ª—É—á—à–µ–µ –∞—É–¥–∏–æ
			"--output", filepath.Join(s.downloadDir, "%(id)s_" + formatID + ".%(ext)s"),
			"--no-playlist",
			"--no-check-certificates",
			"--max-filesize", "2G",    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 2GB
			"--socket-timeout", "60",  // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
			"--retries", "5",          // –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
			"--force-overwrites",      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
			"--merge-output-format", "mp4", // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ MP4 —Å –∞—É–¥–∏–æ
		}
		
		// –ï—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID —Ñ–æ—Ä–º–∞—Ç–∞ - –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "drc", "audio", "webm" –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∞—É–¥–∏–æ ID, —ç—Ç–æ –∞—É–¥–∏–æ
		if strings.Contains(formatID, "drc") || strings.Contains(formatID, "audio") || strings.Contains(formatID, "bestaudio") || strings.Contains(formatID, "webm") {
			args = append(args, "--extract-audio", "--audio-format", "mp3", "--audio-quality", "0")
			log.Printf("üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç %s, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3", formatID)
		}
		
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –¥–∞—Ç—å webm —Ñ–∞–π–ª, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP4
		// –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ webm —Ñ–æ—Ä–º–∞—Ç–µ
		if strings.Contains(formatID, "webm") || strings.Contains(formatID, "251") || strings.Contains(formatID, "250") {
			args = append(args, "--recode-video", "mp4")
			log.Printf("üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω WebM —Ñ–æ—Ä–º–∞—Ç %s, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP4", formatID)
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
		args = append(args, proxyArgs...)
		args = append(args, videoURL)
		
		// –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Minute)
		defer cancel()
		
		cmd := exec.CommandContext(ctx, getYtDlpPath(), args...)

		log.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: %s", strings.Join(cmd.Args, " "))

		// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
		output, err := cmd.CombinedOutput()
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ yt-dlp: %s", string(output))
			return fmt.Errorf("–æ—à–∏–±–∫–∞ yt-dlp: %v", err)
		}

		log.Printf("‚úÖ yt-dlp –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: %s", string(output))

		// –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
		foundFile, findErr := s.findDownloadedFile(videoURL, formatID)
		if findErr != nil {
			return findErr
		}
		
		videoFile = foundFile
		return nil
	}, 2, 5*time.Second) // 2 –ø–æ–ø—ã—Ç–∫–∏ —Å –±–∞–∑–æ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π 5 —Å–µ–∫—É–Ω–¥
	
	if err != nil {
		lastErr = err
		log.Printf("üí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫: %v", err)
		return "", lastErr
	}

	return videoFile, nil
}

// findDownloadedFileOld –∏—â–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
func (s *YouTubeService) findDownloadedFileOld(videoURL string) (string, error) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ URL
	videoID := extractVideoID(videoURL)
	if videoID == "" {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ URL: %s", videoURL)
	}

	files, err := os.ReadDir(s.downloadDir)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	// –ò—â–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID –≤–∏–¥–µ–æ
	var videoFile string
	for _, file := range files {
		if !file.IsDir() && !strings.HasSuffix(file.Name(), ".webp") {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç ID –≤–∏–¥–µ–æ
			if strings.Contains(file.Name(), videoID) {
				videoFile = filepath.Join(s.downloadDir, file.Name())
				log.Printf("üéØ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ %s: %s", videoID, file.Name())
				break
			}
		}
	}

	if videoFile == "" {
		return "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ %s", videoID)
	}

	return videoFile, nil
}

// cleanVideoFiles –æ—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
func (s *YouTubeService) cleanVideoFiles(videoURL, formatID string) error {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ URL
	videoID := extractVideoID(videoURL)
	if videoID == "" {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ URL: %s", videoURL)
		return nil
	}

	files, err := os.ReadDir(s.downloadDir)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —ç—Ç–∏–º ID –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–º
	deletedCount := 0
	expectedPattern := videoID + "_" + formatID
	for _, file := range files {
		if !file.IsDir() && strings.Contains(file.Name(), expectedPattern) {
			filePath := filepath.Join(s.downloadDir, file.Name())
			if err := os.Remove(filePath); err != nil {
				log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª %s: %v", filePath, err)
			} else {
				log.Printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ %s (—Ñ–æ—Ä–º–∞—Ç %s): %s", videoID, formatID, filePath)
				deletedCount++
			}
		}
	}

	if deletedCount > 0 {
		log.Printf("üßπ –£–¥–∞–ª–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ %s", deletedCount, videoID)
	} else {
		log.Printf("‚ÑπÔ∏è –§–∞–π–ª—ã –¥–ª—è –≤–∏–¥–µ–æ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", videoID)
	}
	return nil
}

// extractVideoID –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL
func extractVideoID(url string) string {
	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã YouTube URL
	patterns := []string{
		`youtube\.com/watch\?v=([a-zA-Z0-9_-]+)`,
		`youtu\.be/([a-zA-Z0-9_-]+)`,
		`youtube\.com/embed/([a-zA-Z0-9_-]+)`,
		`youtube\.com/shorts/([a-zA-Z0-9_-]+)`, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É YouTube Shorts
	}

	for _, pattern := range patterns {
		re := regexp.MustCompile(pattern)
		matches := re.FindStringSubmatch(url)
		if len(matches) > 1 {
			return matches[1]
		}
	}

	return ""
}

// findDownloadedFile –∏—â–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL –∏ —Ñ–æ—Ä–º–∞—Ç–∞
func (s *YouTubeService) findDownloadedFile(videoURL, formatID string) (string, error) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ URL
	videoID := extractVideoID(videoURL)
	if videoID == "" {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ URL: %s", videoURL)
	}

	files, err := os.ReadDir(s.downloadDir)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	// –ò—â–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–º
	var videoFile string
	expectedPattern := videoID + "_" + formatID
	for _, file := range files {
		if !file.IsDir() && !strings.HasSuffix(file.Name(), ".webp") {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç ID –≤–∏–¥–µ–æ –∏ formatID
			if strings.Contains(file.Name(), expectedPattern) {
				videoFile = filepath.Join(s.downloadDir, file.Name())
				log.Printf("üéØ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ %s (—Ñ–æ—Ä–º–∞—Ç %s): %s", videoID, formatID, file.Name())
				break
			}
		}
	}

	if videoFile == "" {
		return "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ %s", videoID)
	}

	return videoFile, nil
}

// DownloadVideoFast –±—ã—Å—Ç—Ä–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
func (s *YouTubeService) DownloadVideoFast(url string) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(s.downloadDir, 0755); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	log.Printf("‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: %s", url)

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	strategies := []struct {
		name string
		args []string
	}{
		{
			name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (–¥–æ 2GB)",
			args: []string{
				"--format", "best[ext=mp4]/best",
				"--output", filepath.Join(s.downloadDir, "%(id)s.%(ext)s"),
				"--no-playlist",
				"--no-check-certificates",
				"--no-warnings",
				"--quiet",
				"--max-filesize", "2G",
				"--socket-timeout", "60",
				"--retries", "5",
			},
		},
		{
			name: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –æ–±—Ö–æ–¥–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–¥–æ 2GB)",
			args: []string{
				"--format", "best",
				"--output", filepath.Join(s.downloadDir, "%(id)s.%(ext)s"),
				"--no-playlist",
				"--no-check-certificates",
				"--no-warnings",
				"--quiet",
				"--extractor-args", "youtube:player_client=android",
				"--force-generic-extractor",
				"--max-filesize", "2G",
				"--socket-timeout", "60",
				"--retries", "5",
			},
		},
		{
			name: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–∫—Å–∏ (–¥–æ 2GB)",
			args: []string{
				"--format", "best",
				"--output", filepath.Join(s.downloadDir, "%(id)s.%(ext)s"),
				"--no-playlist",
				"--no-check-certificates",
				"--no-warnings",
				"--quiet",
				"--extractor-args", "youtube:player_client=android",
				"--max-filesize", "2G",
				"--socket-timeout", "60",
				"--retries", "5",
			},
		},
	}

	for i, strategy := range strategies {
		log.Printf("üîÑ –ü–æ–ø—ã—Ç–∫–∞ %d: %s", i+1, strategy.name)
		
		// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
		proxyArgs := getProxyArgs()
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
		args := append(strategy.args, proxyArgs...)
		args = append(args, url)
		
		// –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Minute)
		defer cancel()
		
		cmd := exec.CommandContext(ctx, getYtDlpPath(), args...)
		
		log.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: %s", strings.Join(cmd.Args, " "))
		
		output, err := cmd.CombinedOutput()
		if err == nil {
			log.Printf("‚úÖ %s –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: %s", strategy.name, string(output))
			
			// –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞)
			videoFile, err := s.findDownloadedFileOld(url)
			if err != nil {
				continue // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
			}
			
			return videoFile, nil
		}
		
		log.Printf("‚ùå %s –Ω–µ —É–¥–∞–ª—Å—è: %s", strategy.name, string(output))
	}

	return "", fmt.Errorf("–≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å")
}

// CheckYtDlp –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ yt-dlp –≤ —Å–∏—Å—Ç–µ–º–µ
func (s *YouTubeService) CheckYtDlp() error {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
	if _, err := exec.LookPath("/usr/local/bin/yt-dlp"); err == nil {
		log.Printf("‚úÖ yt-dlp –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ /usr/local/bin/yt-dlp")
		return nil
	}
	
	// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å
	if _, err := exec.LookPath("yt-dlp"); err == nil {
		log.Printf("‚úÖ yt-dlp –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ yt-dlp")
		return nil
	}
	
	return fmt.Errorf("yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É")
}

// CheckNetwork –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YouTube
func (s *YouTubeService) CheckNetwork() error {
	log.Printf("üåê –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YouTube...")
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É curl —Å –ø—Ä–æ–∫—Å–∏
	args := []string{"-s", "--connect-timeout", "10", "--max-time", "30"}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
	proxyArgs := getProxyArgs()
	if len(proxyArgs) > 0 {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ --proxy –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ getProxyArgs
		for i, arg := range proxyArgs {
			if arg == "--proxy" && i+1 < len(proxyArgs) {
				args = append(args, "--proxy", proxyArgs[i+1])
				log.Printf("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: %s", proxyArgs[i+1])
				break
			}
		}
	}
	
	args = append(args, "https://www.youtube.com")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YouTube
	cmd := exec.Command("curl", args...)
	
	if err := cmd.Run(); err != nil {
		log.Printf("‚ö†Ô∏è YouTube –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ curl: %v", err)
		return fmt.Errorf("–ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ YouTube")
	}
	
	log.Printf("‚úÖ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YouTube —Ä–∞–±–æ—Ç–∞–µ—Ç")
	return nil
}

// isBetterAudioQuality –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç –ª—É—á—à–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
func (s *YouTubeService) isBetterAudioQuality(new, existing VideoFormat) bool {
	// –î–ª—è –∞—É–¥–∏–æ: –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
	if new.FileSize != "" && existing.FileSize != "" {
		newSize := s.parseFileSize(new.FileSize)
		existingSize := s.parseFileSize(existing.FileSize)
		return newSize > existingSize
	}
	
	// –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å - —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π –ª—É—á—à–µ
	return true
}

// isBetterQuality –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ª—É—á—à–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
func (s *YouTubeService) isBetterQuality(new, existing VideoFormat) bool {
	// –ï—Å–ª–∏ —É –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –µ—Å—Ç—å –∞—É–¥–∏–æ, –∞ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–µ—Ç - –Ω–æ–≤—ã–π –ª—É—á—à–µ
	if new.HasAudio && !existing.HasAudio {
		return true
	}
	
	// –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö –µ—Å—Ç—å –∞—É–¥–∏–æ –∏–ª–∏ —É –æ–±–æ–∏—Ö –Ω–µ—Ç - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
	// –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
	if new.FileSize != "" && existing.FileSize != "" {
		newSize := s.parseFileSize(new.FileSize)
		existingSize := s.parseFileSize(existing.FileSize)
		return newSize > existingSize
	}
	
	// –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å - —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π –ª—É—á—à–µ
	return true
}

// parseFileSize –ø–∞—Ä—Å–∏—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
func (s *YouTubeService) parseFileSize(fileSize string) int64 {
	fileSize = strings.TrimSpace(fileSize)
	fileSize = strings.TrimPrefix(fileSize, "‚âà")
	fileSize = strings.TrimPrefix(fileSize, "~")
	
	var multiplier int64 = 1
	if strings.Contains(fileSize, "GiB") {
		multiplier = 1024 * 1024 * 1024
		fileSize = strings.Replace(fileSize, "GiB", "", 1)
	} else if strings.Contains(fileSize, "MiB") {
		multiplier = 1024 * 1024
		fileSize = strings.Replace(fileSize, "MiB", "", 1)
	} else if strings.Contains(fileSize, "KiB") {
		multiplier = 1024
		fileSize = strings.Replace(fileSize, "KiB", "", 1)
	} else if strings.Contains(fileSize, "B") {
		multiplier = 1
		fileSize = strings.Replace(fileSize, "B", "", 1)
	}
	
	if size, err := strconv.ParseFloat(fileSize, 64); err == nil {
		return int64(size * float64(multiplier))
	}
	
	return 0
}

// GetVideoMetadata –ø–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
func (s *YouTubeService) GetVideoMetadata(url string) (*VideoMetadata, error) {
	log.Printf("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è: %s", url)
	
	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
	proxyArgs := getProxyArgs()
	
	// –ö–æ–º–∞–Ω–¥–∞ yt-dlp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	args := []string{
		"--dump-json",           // –ü–æ–ª—É—á–∞–µ–º JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
		"--no-playlist",         // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ
		"--no-check-certificates",
		"--no-warnings",
		"--quiet",
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
	args = append(args, proxyArgs...)
	args = append(args, url)
	
	// –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)
	defer cancel()
	
	cmd := exec.CommandContext(ctx, getYtDlpPath(), args...)
	
	log.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %s", strings.Join(cmd.Args, " "))
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %s", string(output))
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	
	// –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	metadata, err := s.parseVideoMetadata(string(output))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
	metadata.OriginalURL = url
	
	log.Printf("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: %s - %s", metadata.Title, metadata.Author)
	log.Printf("üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞: %s", metadata.Thumbnail)
	log.Printf("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s", metadata.Duration)
	log.Printf("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: %s", metadata.Views)
	log.Printf("üîó –û—Ä–∏–≥–∏–Ω–∞–ª: %s", metadata.OriginalURL)
	return metadata, nil
}

// parseVideoMetadata –ø–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç yt-dlp –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
func (s *YouTubeService) parseVideoMetadata(jsonOutput string) (*VideoMetadata, error) {
	// –ü–∞—Ä—Å–∏–º JSON
	var data map[string]interface{}
	if err := json.Unmarshal([]byte(jsonOutput), &data); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}
	
	// –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–∏ JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	log.Printf("üîç –ö–ª—é—á–∏ –≤ JSON –æ—Ç–≤–µ—Ç–µ: %v", getKeys(data))
	
	metadata := &VideoMetadata{}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
	if title, ok := data["title"].(string); ok {
		metadata.Title = title
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞
	if uploader, ok := data["uploader"].(string); ok {
		metadata.Author = uploader
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	if duration, ok := data["duration"].(float64); ok {
		metadata.Duration = s.formatDuration(int(duration))
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
	if viewCount, ok := data["view_count"].(float64); ok {
		metadata.Views = s.formatViews(int64(viewCount))
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
	if description, ok := data["description"].(string); ok {
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
		if len(description) > 200 {
			metadata.Description = description[:200] + "..."
		} else {
			metadata.Description = description
		}
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É (–±–µ—Ä–µ–º –ª—É—á—à—É—é –ø–æ –∫–∞—á–µ—Å—Ç–≤—É)
	if thumbnails, ok := data["thumbnails"].([]interface{}); ok && len(thumbnails) > 0 {
		// –ò—â–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
		var bestThumbnail string
		var maxWidth int
		
		for _, thumb := range thumbnails {
			if thumbMap, ok := thumb.(map[string]interface{}); ok {
				if url, ok := thumbMap["url"].(string); ok {
					// –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∏—Ä–∏–Ω–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
					if width, ok := thumbMap["width"].(float64); ok {
						if int(width) > maxWidth {
							maxWidth = int(width)
							bestThumbnail = url
						}
					} else {
						// –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∏—Ä–∏–Ω–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
						if bestThumbnail == "" {
							bestThumbnail = url
						}
					}
				}
			}
		}
		
		if bestThumbnail != "" {
			metadata.Thumbnail = bestThumbnail
			log.Printf("üñºÔ∏è –í—ã–±—Ä–∞–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞: %s (—à–∏—Ä–∏–Ω–∞: %dpx)", bestThumbnail, maxWidth)
		}
	} else {
		// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º thumbnail –∏–∑ –∫–æ—Ä–Ω—è JSON
		if thumbnail, ok := data["thumbnail"].(string); ok && thumbnail != "" {
			metadata.Thumbnail = thumbnail
			log.Printf("üñºÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –º–∏–Ω–∏–∞—Ç—é—Ä–∞: %s", thumbnail)
		} else {
			log.Printf("‚ö†Ô∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON –æ—Ç–≤–µ—Ç–µ")
		}
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
	if uploadDate, ok := data["upload_date"].(string); ok {
		metadata.UploadDate = s.formatUploadDate(uploadDate)
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
	if webpageURL, ok := data["webpage_url"].(string); ok {
		metadata.OriginalURL = webpageURL
	}
	
	return metadata, nil
}

// formatDuration —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func (s *YouTubeService) formatDuration(seconds int) string {
	if seconds < 60 {
		return fmt.Sprintf("%d —Å–µ–∫", seconds)
	} else if seconds < 3600 {
		minutes := seconds / 60
		remainingSeconds := seconds % 60
		if remainingSeconds == 0 {
			return fmt.Sprintf("%d –º–∏–Ω", minutes)
		}
		return fmt.Sprintf("%d –º–∏–Ω %d —Å–µ–∫", minutes, remainingSeconds)
	} else {
		hours := seconds / 3600
		minutes := (seconds % 3600) / 60
		if minutes == 0 {
			return fmt.Sprintf("%d —á", hours)
		}
		return fmt.Sprintf("%d —á %d –º–∏–Ω", hours, minutes)
	}
}

// formatViews —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
func (s *YouTubeService) formatViews(views int64) string {
	if views < 1000 {
		return fmt.Sprintf("%d", views)
	} else if views < 1000000 {
		return fmt.Sprintf("%.1fK", float64(views)/1000)
	} else if views < 1000000000 {
		return fmt.Sprintf("%.1fM", float64(views)/1000000)
	} else {
		return fmt.Sprintf("%.1fB", float64(views)/1000000000)
	}
}

// formatUploadDate —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
func (s *YouTubeService) formatUploadDate(uploadDate string) string {
	// –§–æ—Ä–º–∞—Ç: YYYYMMDD
	if len(uploadDate) >= 8 {
		year := uploadDate[:4]
		month := uploadDate[4:6]
		day := uploadDate[6:8]
		return fmt.Sprintf("%s.%s.%s", day, month, year)
	}
	return uploadDate
}

// getKeys –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ map –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
func getKeys(data map[string]interface{}) []string {
	keys := make([]string, 0, len(data))
	for k := range data {
		keys = append(keys, k)
	}
	return keys
}
