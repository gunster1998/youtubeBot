package services

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"
	"time"
	"strconv"
)

// VideoFormat –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ
type VideoFormat struct {
	ID         string
	Extension  string
	Resolution string
	FPS        string
	HasAudio   bool
	FileSize   string
}

// YouTubeService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube
type YouTubeService struct {
	downloadDir string
}

// NewYouTubeService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä YouTubeService
func NewYouTubeService(downloadDir string) *YouTubeService {
	return &YouTubeService{
		downloadDir: downloadDir,
	}
}

// GetVideoFormats –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ
func (s *YouTubeService) GetVideoFormats(url string) ([]VideoFormat, error) {
	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è: %s", url)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º --list-formats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()

	cmd := exec.CommandContext(ctx, "yt-dlp",
		"--list-formats",
		"--no-playlist",
		"--no-check-certificates",
		url)

	output, err := cmd.CombinedOutput()
	if err != nil {
		if ctx.Err() == context.DeadlineExceeded {
			return nil, fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ (15 —Å–µ–∫)")
		}
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ yt-dlp: %v", err)
	}

	log.Printf("üìã –ü–æ–ª—É—á–µ–Ω –≤—ã–≤–æ–¥ yt-dlp")

	// –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ yt-dlp
	var allFormats []VideoFormat
	lines := strings.Split(string(output), "\n")

	startParsing := false

	for _, line := range lines {
		line = strings.TrimSpace(line)

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
		if line == "" {
			continue
		}

		// –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "Available formats for"
		if strings.Contains(line, "Available formats for") {
			startParsing = true
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
		if strings.Contains(line, "ID  EXT") || strings.Contains(line, "---") {
			continue
		}

		// –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∏ –∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ID
		if startParsing && regexp.MustCompile(`^\d+`).MatchString(line) {
			parts := strings.Fields(line)
			if len(parts) >= 4 {
				format := VideoFormat{
					ID:         parts[0],
					Extension:  parts[1],
					Resolution: parts[2],
					FPS:        parts[3],
					HasAudio:   !strings.Contains(line, "video only"),
				}

				// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
				if len(parts) >= 6 && parts[5] != "~" {
					format.FileSize = parts[5]
				}

				allFormats = append(allFormats, format)
				log.Printf("üìπ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç: %s %s %s (–∞—É–¥–∏–æ: %v)",
					format.ID, format.Resolution, format.Extension, format.HasAudio)
			}
		}
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram
	telegramFormats := s.filterTelegramCompatibleFormats(allFormats)

	log.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d —Ñ–æ—Ä–º–∞—Ç–æ–≤, %d —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å Telegram", len(allFormats), len(telegramFormats))
	return telegramFormats, nil
}

// filterTelegramCompatibleFormats —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram
func (s *YouTubeService) filterTelegramCompatibleFormats(formats []VideoFormat) []VideoFormat {
	var compatible []VideoFormat

	for _, format := range formats {
		// Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
		if s.isTelegramCompatible(format) {
			compatible = append(compatible, format)
		}
	}

	return compatible
}

// isTelegramCompatible –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ —Å Telegram
func (s *YouTubeService) isTelegramCompatible(format VideoFormat) bool {
	// Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ MP4 –∏ MOV
	if format.Extension != "mp4" && format.Extension != "mov" {
		return false
	}

	// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–æ+–∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ (–Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ)
	if !format.HasAudio {
		return false
	}

	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
	if format.Resolution == "48x27" || format.Resolution == "80x45" ||
		format.Resolution == "160x90" || format.Resolution == "320x180" {
		return false
	}

	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)
	if strings.Contains(format.Resolution, "4K") || strings.Contains(format.Resolution, "8K") {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 50MB)
	if format.FileSize != "" {
		// –ü—Ä–∏–º–µ—Ä: "4.33MiB" -> –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
		if strings.Contains(format.FileSize, "GiB") {
			return false
		}
	}

	return true
}

// isFileSizeTooLarge –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–∏–º–∏—Ç Telegram (50MB)
func (s *YouTubeService) isFileSizeTooLarge(fileSize string) bool {
	// Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ 50MB
	const maxSizeMB = 50
	
	// –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "52.91MiB", "1.2GiB", "500KiB")
	fileSize = strings.TrimSpace(fileSize)
	
	// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö - —Ç–æ—á–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
	if strings.Contains(fileSize, "GiB") {
		return true
	}
	
	// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
	if strings.Contains(fileSize, "MiB") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		sizeStr := strings.Replace(fileSize, "MiB", "", 1)
		if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
			return size > float64(maxSizeMB)
		}
	}
	
	// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö - —Ç–æ—á–Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç
	if strings.Contains(fileSize, "KiB") {
		return false
	}
	
	// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º
	if strings.Contains(fileSize, "B") && !strings.Contains(fileSize, "KiB") && !strings.Contains(fileSize, "MiB") && !strings.Contains(fileSize, "GiB") {
		sizeStr := strings.Replace(fileSize, "B", "", 1)
		if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
			return size > float64(maxSizeMB*1024*1024) // 50MB –≤ –±–∞–π—Ç–∞—Ö
		}
	}
	
	// –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–ª—É—á—à–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è)
	log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %s", fileSize)
	return true
}

// DownloadVideo —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube
func (s *YouTubeService) DownloadVideo(url string) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(s.downloadDir, 0755); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	log.Printf("üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: %s", url)

	// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª—É—á—à–µ–≥–æ MP4 —Ñ–æ—Ä–º–∞—Ç–∞
	cmd := exec.Command("yt-dlp",
		"--format", "best[ext=mp4]/best", // –õ—É—á—à–∏–π MP4 –∏–ª–∏ –ª—é–±–æ–π –ª—É—á—à–∏–π
		"--output", filepath.Join(s.downloadDir, "%(id)s.%(ext)s"), // –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ ID
		"--no-playlist",           // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ
		"--no-check-certificates", // –£—Å–∫–æ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
		url)

	log.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: %s", strings.Join(cmd.Args, " "))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ yt-dlp: %s", string(output))
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ yt-dlp: %v", err)
	}

	log.Printf("‚úÖ yt-dlp –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: %s", string(output))

	// –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
	videoFile, err := s.findDownloadedFile()
	if err != nil {
		return "", err
	}

	return videoFile, nil
}

// DownloadVideoWithFormat —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func (s *YouTubeService) DownloadVideoWithFormat(videoID, formatID string) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(s.downloadDir, 0755); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	url := fmt.Sprintf("https://www.youtube.com/watch?v=%s", videoID)
	log.Printf("üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ %s –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", videoID, formatID)

	// –ö–æ–º–∞–Ω–¥–∞ yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	cmd := exec.Command("yt-dlp",
		"--format", formatID,
		"--output", filepath.Join(s.downloadDir, "%(id)s.%(ext)s"),
		"--no-playlist",
		"--no-check-certificates",
		url)

	log.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: %s", strings.Join(cmd.Args, " "))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ yt-dlp: %s", string(output))
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ yt-dlp: %v", err)
	}

	log.Printf("‚úÖ yt-dlp –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: %s", string(output))

	// –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
	videoFile, err := s.findDownloadedFile()
	if err != nil {
		return "", err
	}

	return videoFile, nil
}

// findDownloadedFile –∏—â–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
func (s *YouTubeService) findDownloadedFile() (string, error) {
	files, err := os.ReadDir(s.downloadDir)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}

	// –ò—â–µ–º –ª—é–±–æ–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
	var videoFile string
	for _, file := range files {
		if !file.IsDir() && !strings.HasSuffix(file.Name(), ".webp") {
			videoFile = filepath.Join(s.downloadDir, file.Name())
			break
		}
	}

	if videoFile == "" {
		return "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
	}

	return videoFile, nil
}

// CheckYtDlp –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ yt-dlp –≤ —Å–∏—Å—Ç–µ–º–µ
func (s *YouTubeService) CheckYtDlp() error {
	if _, err := exec.LookPath("yt-dlp"); err != nil {
		return fmt.Errorf("yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: brew install yt-dlp")
	}
	return nil
}
