package services

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"
)

// DownloadJob –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏
type DownloadJob struct {
	ID        string    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
	UserID    int64     // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ChatID    int64     // ID —á–∞—Ç–∞
	VideoURL  string    // URL –≤–∏–¥–µ–æ
	FormatID  string    // ID —Ñ–æ—Ä–º–∞—Ç–∞
	Priority  int       // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10, –≥–¥–µ 10 - –≤—ã—Å—à–∏–π)
	CreatedAt time.Time // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
	Status    JobStatus // –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
	Error     error     // –û—à–∏–±–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
	Result    string    // –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
}

// JobStatus –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
type JobStatus string

const (
	JobStatusPending   JobStatus = "pending"   // –í –æ—á–µ—Ä–µ–¥–∏
	JobStatusProcessing JobStatus = "processing" // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
	JobStatusCompleted JobStatus = "completed" // –ó–∞–≤–µ—Ä—à–µ–Ω–∞
	JobStatusFailed    JobStatus = "failed"    // –û—à–∏–±–∫–∞
	JobStatusCancelled JobStatus = "cancelled" // –û—Ç–º–µ–Ω–µ–Ω–∞
)

// JobResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
type JobResult struct {
	JobID   string
	Status  JobStatus
	Result  string
	Error   error
}

// DownloadQueue —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å—é –∑–∞–≥—Ä—É–∑–æ–∫
type DownloadQueue struct {
	jobs           chan DownloadJob
	results        chan JobResult
	workers        int
	activeJobs     map[string]*DownloadJob
	activeJobsMux  sync.RWMutex
	jobCounter     int64
	jobCounterMux  sync.Mutex
	ctx            context.Context
	cancel         context.CancelFunc
	wg             sync.WaitGroup
	youtubeService *YouTubeService
	cacheService   *CacheService
}

// NewDownloadQueue —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫
func NewDownloadQueue(workers int, youtubeService *YouTubeService, cacheService *CacheService) *DownloadQueue {
	ctx, cancel := context.WithCancel(context.Background())
	
	return &DownloadQueue{
		jobs:           make(chan DownloadJob, 1000), // –ë—É—Ñ–µ—Ä –Ω–∞ 1000 –∑–∞–¥–∞—á
		results:        make(chan JobResult, 1000),
		workers:        workers,
		activeJobs:     make(map[string]*DownloadJob),
		ctx:            ctx,
		cancel:         cancel,
		youtubeService: youtubeService,
		cacheService:   cacheService,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä—ã –æ—á–µ—Ä–µ–¥–∏
func (q *DownloadQueue) Start() {
	log.Printf("üöÄ –ó–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫ —Å %d –≤–æ—Ä–∫–µ—Ä–∞–º–∏", q.workers)
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
	for i := 0; i < q.workers; i++ {
		q.wg.Add(1)
		go q.worker(i)
	}
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	q.wg.Add(1)
	go q.resultHandler()
	
	log.Printf("‚úÖ –û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞")
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å
func (q *DownloadQueue) Stop() {
	log.Printf("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫...")
	q.cancel()
	close(q.jobs)
	close(q.results)
	q.wg.Wait()
	log.Printf("‚úÖ –û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
}

// AddJob –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
func (q *DownloadQueue) AddJob(userID, chatID int64, videoURL, formatID string, priority int) (string, error) {
	q.jobCounterMux.Lock()
	q.jobCounter++
	jobID := fmt.Sprintf("job_%d_%d", time.Now().Unix(), q.jobCounter)
	q.jobCounterMux.Unlock()
	
	job := DownloadJob{
		ID:        jobID,
		UserID:    userID,
		ChatID:    chatID,
		VideoURL:  videoURL,
		FormatID:  formatID,
		Priority:  priority,
		CreatedAt: time.Now(),
		Status:    JobStatusPending,
	}
	
	select {
	case q.jobs <- job:
		log.Printf("üìù –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: %s (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %d)", 
			jobID, userID, priority)
		return jobID, nil
	case <-q.ctx.Done():
		return "", fmt.Errorf("–æ—á–µ—Ä–µ–¥—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
	default:
		return "", fmt.Errorf("–æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
	}
}

// GetJobStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
func (q *DownloadQueue) GetJobStatus(jobID string) (*DownloadJob, bool) {
	q.activeJobsMux.RLock()
	defer q.activeJobsMux.RUnlock()
	
	job, exists := q.activeJobs[jobID]
	return job, exists
}

// GetUserJobs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (q *DownloadQueue) GetUserJobs(userID int64) []*DownloadJob {
	q.activeJobsMux.RLock()
	defer q.activeJobsMux.RUnlock()
	
	var userJobs []*DownloadJob
	for _, job := range q.activeJobs {
		if job.UserID == userID {
			userJobs = append(userJobs, job)
		}
	}
	
	return userJobs
}

// CancelJob –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
func (q *DownloadQueue) CancelJob(jobID string) error {
	q.activeJobsMux.Lock()
	defer q.activeJobsMux.Unlock()
	
	job, exists := q.activeJobs[jobID]
	if !exists {
		return fmt.Errorf("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	
	if job.Status == JobStatusCompleted || job.Status == JobStatusFailed {
		return fmt.Errorf("–∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	}
	
	job.Status = JobStatusCancelled
	log.Printf("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: %s", jobID)
	return nil
}

// worker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
func (q *DownloadQueue) worker(workerID int) {
	defer q.wg.Done()
	
	log.Printf("üë∑ –í–æ—Ä–∫–µ—Ä %d –∑–∞–ø—É—â–µ–Ω", workerID)
	
	for {
		select {
		case job := <-q.jobs:
			if job.Status == JobStatusCancelled {
				continue
			}
			
			// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
			q.activeJobsMux.Lock()
			q.activeJobs[job.ID] = &job
			q.activeJobsMux.Unlock()
			
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
			q.processJob(workerID, &job)
			
			// –ù–ï —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ä–∞–∑—É - –ø—É—Å—Ç—å resultHandler —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç
			// q.activeJobsMux.Lock()
			// delete(q.activeJobs, job.ID)
			// q.activeJobsMux.Unlock()
			
		case <-q.ctx.Done():
			log.Printf("üë∑ –í–æ—Ä–∫–µ—Ä %d –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", workerID)
			return
		}
	}
}

// processJob –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
func (q *DownloadQueue) processJob(workerID int, job *DownloadJob) {
	log.Printf("üîÑ –í–æ—Ä–∫–µ—Ä %d –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É %s: %s", workerID, job.ID, job.VideoURL)
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
	job.Status = JobStatusProcessing
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	videoID := extractVideoID(job.VideoURL)
	if videoID != "" {
		if isCached, cachedVideo, err := q.cacheService.IsVideoCached(videoID, job.FormatID); err == nil && isCached {
			// –í–∏–¥–µ–æ –≤ –∫—ç—à–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			log.Printf("‚ö° –ó–∞–¥–∞—á–∞ %s: –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ", job.ID)
			
			// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
			q.cacheService.IncrementDownloadCount(videoID, job.FormatID)
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
			select {
			case q.results <- JobResult{
				JobID:  job.ID,
				Status: JobStatusCompleted,
				Result: cachedVideo.FilePath,
			}:
				log.Printf("‚úÖ –ó–∞–¥–∞—á–∞ %s: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª", job.ID)
			case <-q.ctx.Done():
				log.Printf("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ %s: –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—ç—à–∞", job.ID)
				return
			}
			return
		}
	}
	
	// –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
	log.Printf("üì• –ó–∞–¥–∞—á–∞ %s: —Å–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...", job.ID)
	videoPath, err := q.youtubeService.DownloadVideoWithFormat(job.VideoURL, job.FormatID)
	if err != nil {
		log.Printf("‚ùå –ó–∞–¥–∞—á–∞ %s: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: %v", job.ID, err)
		q.results <- JobResult{
			JobID:  job.ID,
			Status: JobStatusFailed,
			Error:  err,
		}
		return
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ, –Ω–µ –¥–ª—è –∞—É–¥–∏–æ)
	if videoID != "" && !isAudioFile(videoPath) {
		if fileInfo, err := os.Stat(videoPath); err == nil {
			// –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
			formats, _ := q.youtubeService.GetVideoFormats(job.VideoURL)
			var resolution string
			for _, f := range formats {
				if f.ID == job.FormatID {
					resolution = f.Resolution
					break
				}
			}
			
			// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
			if err := q.cacheService.AddToCache(videoID, job.VideoURL, "YouTube Video", job.FormatID, resolution, videoPath, fileInfo.Size()); err != nil {
				log.Printf("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ %s: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫—ç—à: %v", job.ID, err)
			}
		}
	}
	
	log.Printf("‚úÖ –ó–∞–¥–∞—á–∞ %s: –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s", job.ID, videoPath)
	q.results <- JobResult{
		JobID:  job.ID,
		Status: JobStatusCompleted,
		Result: videoPath,
	}
}

// resultHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
func (q *DownloadQueue) resultHandler() {
	defer q.wg.Done()
	
	log.Printf("üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
	
	for {
		select {
		case result := <-q.results:
			log.Printf("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ %s: %s", result.JobID, result.Status)
			
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
			q.activeJobsMux.Lock()
			if job, exists := q.activeJobs[result.JobID]; exists {
				job.Status = result.Status
				job.Result = result.Result
				job.Error = result.Error
				log.Printf("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ %s: %s", result.JobID, result.Status)
				
				// –î–∞–µ–º –≤—Ä–µ–º—è monitorJob –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
				go func(jobID string) {
					time.Sleep(5 * time.Second) // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
					q.activeJobsMux.Lock()
					delete(q.activeJobs, jobID)
					log.Printf("üóëÔ∏è –ó–∞–¥–∞—á–∞ %s —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", jobID)
					q.activeJobsMux.Unlock()
				}(result.JobID)
			} else {
				log.Printf("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", result.JobID)
			}
			q.activeJobsMux.Unlock()
			
		case <-q.ctx.Done():
			log.Printf("üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// GetQueueStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
func (q *DownloadQueue) GetQueueStats() map[string]interface{} {
	q.activeJobsMux.RLock()
	defer q.activeJobsMux.RUnlock()
	
	stats := map[string]interface{}{
		"workers":        q.workers,
		"active_jobs":    len(q.activeJobs),
		"queue_length":   len(q.jobs),
		"results_buffer": len(q.results),
	}
	
	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
	statusCounts := make(map[JobStatus]int)
	for _, job := range q.activeJobs {
		statusCounts[job.Status]++
	}
	stats["status_counts"] = statusCounts
	
	return stats
}

// isAudioFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—É–¥–∏–æ
func isAudioFile(filePath string) bool {
	ext := strings.ToLower(filepath.Ext(filePath))
	return ext == ".mp3" || ext == ".m4a" || ext == ".webm" || ext == ".ogg"
}