package services

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sync"
	"time"
	_ "github.com/mattn/go-sqlite3"
)

// VideoCache –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
type VideoCache struct {
	ID           int64
	VideoID      string    // Video ID (–ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
	Platform     string    // –¢–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (youtube, tiktok, instagram, etc.)
	URL          string    // –ü–æ–ª–Ω—ã–π URL
	Title        string    // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
	DownloadCount int       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
	LastDownload time.Time // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
	FileSize     int64     // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
	FilePath     string    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –¥–∏—Å–∫–µ
	FormatID     string    // ID —Ñ–æ—Ä–º–∞—Ç–∞
	Resolution   string    // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
	CreatedAt    time.Time // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
}

// CacheService —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ
type CacheService struct {
	db          *sql.DB
	cacheDir    string
	maxCacheSize int64 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ –±–∞–π—Ç–∞—Ö (20-30 –ì–ë)
	mutex       sync.RWMutex // –ó–∞—â–∏—Ç–∞ –æ—Ç race conditions
}

// NewCacheService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
func NewCacheService(cacheDir string, maxCacheSizeGB int) (*CacheService, error) {
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—ç—à–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(cacheDir, 0755); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	dbPath := filepath.Join(cacheDir, "video_cache.db")
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ë–î: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := createCacheTable(db); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}

	service := &CacheService{
		db:          db,
		cacheDir:    cacheDir,
		maxCacheSize: int64(maxCacheSizeGB) * 1024 * 1024 * 1024, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
	}

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	if err := service.cleanupOldFiles(); err != nil {
		log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã: %v", err)
	}

	return service, nil
}

// createCacheTable —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫—ç—à–∞
func createCacheTable(db *sql.DB) error {
	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	createQuery := `
	CREATE TABLE IF NOT EXISTS video_cache (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		video_id TEXT NOT NULL,
		platform TEXT NOT NULL DEFAULT 'youtube',
		url TEXT NOT NULL,
		title TEXT NOT NULL,
		download_count INTEGER DEFAULT 1,
		last_download DATETIME DEFAULT CURRENT_TIMESTAMP,
		file_size INTEGER NOT NULL,
		file_path TEXT NOT NULL,
		format_id TEXT NOT NULL,
		resolution TEXT NOT NULL,
		created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
		UNIQUE(video_id, platform, format_id)
	);
	`
	
	_, err := db.Exec(createQuery)
	if err != nil {
		return err
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ platform
	var count int
	checkQuery := `SELECT COUNT(*) FROM pragma_table_info('video_cache') WHERE name='platform'`
	err = db.QueryRow(checkQuery).Scan(&count)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ platform: %v", err)
	}
	
	// –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ platform –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
	if count == 0 {
		log.Printf("üîÑ –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É platform –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É...")
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É platform
		alterQuery := `ALTER TABLE video_cache ADD COLUMN platform TEXT NOT NULL DEFAULT 'youtube'`
		_, err = db.Exec(alterQuery)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ platform: %v", err)
		}
		
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
		updateQuery := `UPDATE video_cache SET platform = 'youtube' WHERE platform IS NULL OR platform = ''`
		_, err = db.Exec(updateQuery)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: %v", err)
		}
		
		log.Printf("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ platform –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ UNIQUE constraint
	var constraintCount int
	constraintQuery := `SELECT COUNT(*) FROM sqlite_master WHERE type='index' AND name='idx_video_platform_format'`
	err = db.QueryRow(constraintQuery).Scan(&constraintCount)
	if err != nil {
		log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å constraint: %v", err)
	}
	
	// –ï—Å–ª–∏ constraint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
	if constraintCount == 0 {
		log.Printf("üîÑ –î–æ–±–∞–≤–ª—è—é UNIQUE constraint –¥–ª—è (video_id, platform, format_id)...")
		
		// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
		uniqueIndexQuery := `CREATE UNIQUE INDEX IF NOT EXISTS idx_video_platform_format ON video_cache(video_id, platform, format_id)`
		_, err = db.Exec(uniqueIndexQuery)
		if err != nil {
			log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å UNIQUE constraint: %v", err)
		} else {
			log.Printf("‚úÖ UNIQUE constraint –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
	indexQueries := []string{
		`CREATE INDEX IF NOT EXISTS idx_video_id ON video_cache(video_id)`,
		`CREATE INDEX IF NOT EXISTS idx_platform ON video_cache(platform)`,
		`CREATE INDEX IF NOT EXISTS idx_format_id ON video_cache(format_id)`,
		`CREATE INDEX IF NOT EXISTS idx_download_count ON video_cache(download_count)`,
		`CREATE INDEX IF NOT EXISTS idx_last_download ON video_cache(last_download)`,
	}
	
	for _, indexQuery := range indexQueries {
		_, err = db.Exec(indexQuery)
		if err != nil {
			log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: %v", err)
		}
	}
	
	return nil
}

// IsVideoCached –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ
func (cs *CacheService) IsVideoCached(videoID, platform, formatID string) (bool, *VideoCache, error) {
	cs.mutex.RLock()
	defer cs.mutex.RUnlock()
	
	query := `SELECT id, video_id, platform, url, title, download_count, last_download, file_size, file_path, format_id, resolution, created_at 
			  FROM video_cache WHERE video_id = ? AND platform = ? AND format_id = ?`
	
	var cache VideoCache
	err := cs.db.QueryRow(query, videoID, platform, formatID).Scan(
		&cache.ID, &cache.VideoID, &cache.Platform, &cache.URL, &cache.Title, &cache.DownloadCount,
		&cache.LastDownload, &cache.FileSize, &cache.FilePath, &cache.FormatID,
		&cache.Resolution, &cache.CreatedAt,
	)

	if err == sql.ErrNoRows {
		return false, nil, nil
	}
	if err != nil {
		return false, nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
	if _, err := os.Stat(cache.FilePath); os.IsNotExist(err) {
		// –§–∞–π–ª —É–¥–∞–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–∫–∏)
		cs.mutex.RUnlock() // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏
		cs.mutex.Lock()
		if _, deleteErr := cs.db.Exec("DELETE FROM video_cache WHERE id = ?", cache.ID); deleteErr != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î: %v", deleteErr)
		}
		cs.mutex.Unlock()
		cs.mutex.RLock() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á—Ç–µ–Ω–∏—è
		return false, nil, nil
	}

	return true, &cache, nil
}

// AddToCache –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –∫—ç—à
func (cs *CacheService) AddToCache(videoID, platform, url, title, formatID, resolution, filePath string, fileSize int64) error {
	cs.mutex.Lock()
	defer cs.mutex.Unlock()
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –∏ –æ—á–∏—â–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if err := cs.ensureCacheSize(fileSize); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v", err)
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
	existsQuery := `SELECT COUNT(*) FROM video_cache WHERE video_id = ? AND platform = ? AND format_id = ?`
	var count int
	err := cs.db.QueryRow(existsQuery, videoID, platform, formatID).Scan(&count)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v", err)
	}
	
	if count > 0 {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
		updateQuery := `
		UPDATE video_cache SET 
			url = ?, title = ?, file_size = ?, file_path = ?, resolution = ?, 
			last_download = CURRENT_TIMESTAMP, download_count = download_count + 1
		WHERE video_id = ? AND platform = ? AND format_id = ?
		`
		_, err = cs.db.Exec(updateQuery, url, title, fileSize, filePath, resolution, videoID, platform, formatID)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ: %v", err)
		}
	} else {
		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
		insertQuery := `
		INSERT INTO video_cache 
		(video_id, platform, url, title, download_count, last_download, file_size, file_path, format_id, resolution, created_at)
		VALUES (?, ?, ?, ?, 1, CURRENT_TIMESTAMP, ?, ?, ?, ?, CURRENT_TIMESTAMP)
		`
		_, err = cs.db.Exec(insertQuery, videoID, platform, url, title, fileSize, filePath, formatID, resolution)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à: %v", err)
		}
	}

	log.Printf("üíæ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—ç—à: %s (%s) - %s [%s]", videoID, resolution, formatID, platform)
	return nil
}

// IncrementDownloadCount —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
func (cs *CacheService) IncrementDownloadCount(videoID, platform, formatID string) error {
	cs.mutex.Lock()
	defer cs.mutex.Unlock()
	
	query := `UPDATE video_cache SET download_count = download_count + 1, last_download = CURRENT_TIMESTAMP 
			  WHERE video_id = ? AND platform = ? AND format_id = ?`
	
	_, err := cs.db.Exec(query, videoID, platform, formatID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: %v", err)
	}

	return nil
}

// GetPopularVideos –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ (5+ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π)
func (cs *CacheService) GetPopularVideos() ([]VideoCache, error) {
	cs.mutex.RLock()
	defer cs.mutex.RUnlock()
	
	query := `SELECT id, video_id, platform, url, title, download_count, last_download, file_size, file_path, format_id, resolution, created_at 
			  FROM video_cache WHERE download_count >= 5 ORDER BY download_count DESC, last_download DESC`
	
	rows, err := cs.db.Query(query)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ: %v", err)
	}
	defer rows.Close()

	var videos []VideoCache
	for rows.Next() {
		var cache VideoCache
		err := rows.Scan(
			&cache.ID, &cache.VideoID, &cache.Platform, &cache.URL, &cache.Title, &cache.DownloadCount,
			&cache.LastDownload, &cache.FileSize, &cache.FilePath, &cache.FormatID,
			&cache.Resolution, &cache.CreatedAt,
		)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v", err)
			continue
		}
		videos = append(videos, cache)
	}

	return videos, nil
}

// ensureCacheSize –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
func (cs *CacheService) ensureCacheSize(newFileSize int64) error {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
	var totalSize int64
	query := `SELECT COALESCE(SUM(file_size), 0) FROM video_cache`
	err := cs.db.QueryRow(query).Scan(&totalSize)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: %v", err)
	}

	// –ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏–º–∏—Ç
	if totalSize+newFileSize > cs.maxCacheSize {
		log.Printf("‚ö†Ô∏è –ö—ç—à –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç (%d GB), –æ—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã", cs.maxCacheSize/(1024*1024*1024))
		
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞
		query = `SELECT id, file_path, file_size FROM video_cache ORDER BY last_download ASC`
		rows, err := cs.db.Query(query)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: %v", err)
		}
		defer rows.Close()

		for rows.Next() {
			var id int64
			var filePath string
			var fileSize int64
			
			if err := rows.Scan(&id, &filePath, &fileSize); err != nil {
				continue
			}

			// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
			if err := os.Remove(filePath); err != nil {
				log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª %s: %v", filePath, err)
				continue
			}

			// –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–∫–∏)
			if _, deleteErr := cs.db.Exec("DELETE FROM video_cache WHERE id = ?", id); deleteErr != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î: %v", deleteErr)
				continue
			}
			
			totalSize -= fileSize
			log.Printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: %s (%d –±–∞–π—Ç)", filePath, fileSize)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–µ—Å—Ç–∞
			if totalSize+newFileSize <= cs.maxCacheSize {
				break
			}
		}
	}

	return nil
}

// cleanupOldFiles –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
func (cs *CacheService) cleanupOldFiles() error {
	query := `SELECT id, file_path FROM video_cache WHERE last_download < datetime('now', '-30 days')`
	rows, err := cs.db.Query(query)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: %v", err)
	}
	defer rows.Close()

	for rows.Next() {
		var id int64
		var filePath string
		
		if err := rows.Scan(&id, &filePath); err != nil {
			continue
		}

		// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
		if err := os.Remove(filePath); err != nil {
			log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª %s: %v", filePath, err)
			continue
		}

		// –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–∫–∏)
		if _, deleteErr := cs.db.Exec("DELETE FROM video_cache WHERE id = ?", id); deleteErr != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î: %v", deleteErr)
		}
		log.Printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: %s", filePath)
	}

	return nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
func (cs *CacheService) Close() error {
	return cs.db.Close()
}
