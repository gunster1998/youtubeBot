package services

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
)

// UniversalService —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
type UniversalService struct {
	downloadDir    string
	platformDetector *PlatformDetector
}

// NewUniversalService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
func NewUniversalService(downloadDir string) *UniversalService {
	return &UniversalService{
		downloadDir:    downloadDir,
		platformDetector: NewPlatformDetector(),
	}
}

// GetVideoFormats –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func (us *UniversalService) GetVideoFormats(url string) ([]VideoFormat, error) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	platformInfo := us.platformDetector.DetectPlatform(url)
	us.platformDetector.LogPlatformInfo(platformInfo, url)
	
	if !platformInfo.Supported {
		return nil, fmt.Errorf("–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", platformInfo.DisplayName)
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
	formatArgs := []string{
		"--list-formats",
		"--no-playlist",
		"--no-check-certificates",
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
	proxyArgs := getProxyArgs()
	
	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
	allArgs := append(formatArgs, proxyArgs...)
	allArgs = append(allArgs, url)
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É yt-dlp
	cmd := exec.Command(getYtDlpPath(), allArgs...)
	log.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è %s: %s", platformInfo.DisplayName, strings.Join(cmd.Args, " "))
	
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ yt-dlp –¥–ª—è %s: %s", platformInfo.DisplayName, string(output))
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è %s: %v", platformInfo.DisplayName, err)
	}
	
	// –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç—ã
	formats, err := us.parseVideoFormats(string(output), platformInfo.Type)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è %s: %v", platformInfo.DisplayName, err)
	}
	
	log.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è %s", len(formats), platformInfo.DisplayName)
	return formats, nil
}

// DownloadVideoWithFormat —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func (us *UniversalService) DownloadVideoWithFormat(url, formatID string) (string, error) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	platformInfo := us.platformDetector.DetectPlatform(url)
	if !platformInfo.Supported {
		return "", fmt.Errorf("–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", platformInfo.DisplayName)
	}
	
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(us.downloadDir, 0755); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	downloadArgs := []string{
		"--format", formatID,
		"--output", filepath.Join(us.downloadDir, "%(id)s_" + formatID + ".%(ext)s"),
		"--no-playlist",
		"--no-check-certificates",
		"--max-filesize", "2G",
		"--socket-timeout", "60",
		"--retries", "5",
	}
	
	// –ï—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID —Ñ–æ—Ä–º–∞—Ç–∞ - –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "drc", "audio", "webm" –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∞—É–¥–∏–æ ID, —ç—Ç–æ –∞—É–¥–∏–æ
	if strings.Contains(formatID, "drc") || strings.Contains(formatID, "audio") || strings.Contains(formatID, "bestaudio") || strings.Contains(formatID, "webm") {
		downloadArgs = append(downloadArgs, "--extract-audio", "--audio-format", "mp3", "--audio-quality", "0")
		log.Printf("üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç %s, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3", formatID)
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—Å–∏
	proxyArgs := getProxyArgs()
	
	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
	allArgs := append(downloadArgs, proxyArgs...)
	allArgs = append(allArgs, url)
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É yt-dlp
	cmd := exec.Command(getYtDlpPath(), allArgs...)
	log.Printf("üöÄ –°–∫–∞—á–∏–≤–∞—é %s: %s", platformInfo.DisplayName, strings.Join(cmd.Args, " "))
	
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è %s: %s", platformInfo.DisplayName, string(output))
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è %s: %v", platformInfo.DisplayName, err)
	}
	
	// –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
	videoFile, err := us.findDownloadedFile(url, platformInfo, formatID)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è %s: %v", platformInfo.DisplayName, err)
	}
	
	log.Printf("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω –¥–ª—è %s: %s", platformInfo.DisplayName, videoFile)
	return videoFile, nil
}

// parseVideoFormats –ø–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ yt-dlp –¥–ª—è –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func (us *UniversalService) parseVideoFormats(output string, platformType PlatformType) ([]VideoFormat, error) {
	log.Printf("üìã –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è %s", platformType)
	
	var allFormats []VideoFormat
	lines := strings.Split(output, "\n")
	
	startParsing := false
	for _, line := range lines {
		line = strings.TrimSpace(line)
		
		// –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
		if strings.Contains(line, "Available formats") || strings.Contains(line, "ID  EXT") || 
		   strings.Contains(line, "ID EXT") || strings.Contains(line, "format code") {
			startParsing = true
			continue
		}
		
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
		if strings.Contains(line, "---") {
			continue
		}
		
		// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
		if startParsing && len(strings.Fields(line)) >= 4 {
			parts := strings.Fields(line)
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç
			if len(parts) >= 4 && (parts[1] == "mp4" || parts[1] == "webm" || parts[1] == "audio" || 
			   strings.Contains(parts[1], "video") || strings.Contains(parts[1], "audio")) {
				
				// –ï—Å–ª–∏ —ç—Ç–æ webm –∞—É–¥–∏–æ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ audio –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3
				if parts[1] == "webm" && strings.Contains(strings.ToLower(line), "audio") {
					parts[1] = "audio" // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º –Ω–∞ audio –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
				}
				
				format := VideoFormat{
					ID:         parts[0],
					Extension:  parts[1],
					Resolution: parts[2],
					FPS:        parts[3],
					HasAudio:   strings.Contains(strings.ToLower(line), "audio") || parts[1] == "audio",
				}
				
				// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
				for i := 4; i < len(parts); i++ {
					if strings.Contains(parts[i], "MiB") || strings.Contains(parts[i], "GiB") || 
					   strings.Contains(parts[i], "KiB") || strings.Contains(parts[i], "B") {
						format.FileSize = parts[i]
						break
					}
				}
				
				allFormats = append(allFormats, format)
			}
		}
	}
	
	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å Telegram
	return us.filterTelegramCompatibleFormats(allFormats), nil
}

// filterTelegramCompatibleFormats —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å Telegram
func (us *UniversalService) filterTelegramCompatibleFormats(formats []VideoFormat) []VideoFormat {
	var compatible []VideoFormat
	
	for _, format := range formats {
		// Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MP4, MOV, MP3, M4A, OGG (webm –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ mp3)
		if format.Extension == "mp4" || format.Extension == "mov" || format.Extension == "audio" {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 2GB –¥–ª—è Telegram)
			if !us.isFileTooLarge(format.FileSize, 2048) { // 2GB –≤ MB
				compatible = append(compatible, format)
			}
		}
	}
	
	return compatible
}

// isFileTooLarge –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ñ–∞–π–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
func (us *UniversalService) isFileTooLarge(fileSize string, maxSizeMB int) bool {
	if fileSize == "" {
		return false // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
	}
	
	// –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	if strings.Contains(fileSize, "MiB") {
		sizeStr := strings.Replace(fileSize, "MiB", "", 1)
		if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
			return size > float64(maxSizeMB)
		}
	}
	
	if strings.Contains(fileSize, "GiB") {
		sizeStr := strings.Replace(fileSize, "GiB", "", 1)
		if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
			return size*1024 > float64(maxSizeMB) // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GB –≤ MB
		}
	}
	
	return false
}

// findDownloadedFile –∏—â–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
func (us *UniversalService) findDownloadedFile(url string, platformInfo *PlatformInfo, formatID string) (string, error) {
	files, err := os.ReadDir(us.downloadDir)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
	}
	
	// –ò—â–µ–º —Ñ–∞–π–ª —Å ID –≤–∏–¥–µ–æ –∏ formatID
	var videoFile string
	expectedPattern := platformInfo.VideoID + "_" + formatID
	for _, file := range files {
		if !file.IsDir() && !strings.HasSuffix(file.Name(), ".webp") {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç ID –≤–∏–¥–µ–æ –∏ formatID
			if strings.Contains(file.Name(), expectedPattern) {
				videoFile = filepath.Join(us.downloadDir, file.Name())
				log.Printf("üéØ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è %s %s (—Ñ–æ—Ä–º–∞—Ç %s): %s", platformInfo.Icon, platformInfo.DisplayName, formatID, file.Name())
				break
			}
		}
	}
	
	if videoFile == "" {
		return "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è %s %s", platformInfo.Icon, platformInfo.DisplayName)
	}
	
	return videoFile, nil
}

// CheckYtDlp –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å yt-dlp
func (us *UniversalService) CheckYtDlp() error {
	cmd := exec.Command(getYtDlpPath(), "--version")
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
	}
	
	log.Printf("‚úÖ yt-dlp –¥–æ—Å—Ç—É–ø–µ–Ω: %s", strings.TrimSpace(string(output)))
	return nil
}

// CheckNetwork –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (us *UniversalService) CheckNetwork() error {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
	cmd := exec.Command("ping", "-c", "1", "8.8.8.8")
	err := cmd.Run()
	if err != nil {
		return fmt.Errorf("–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
	}
	
	return nil
}

// GetSupportedPlatforms –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
func (us *UniversalService) GetSupportedPlatforms() []PlatformInfo {
	return us.platformDetector.GetSupportedPlatforms()
}

// IsValidURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º
func (us *UniversalService) IsValidURL(url string) bool {
	return us.platformDetector.IsValidURL(url)
}

// GetPlatformInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ø–æ URL
func (us *UniversalService) GetPlatformInfo(url string) *PlatformInfo {
	return us.platformDetector.DetectPlatform(url)
}
