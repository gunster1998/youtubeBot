package utils

import (
	"log"
	"strings"
	"time"
)

// ExtractVideoID –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL
func ExtractVideoID(url string) string {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ URL
	if strings.Contains(url, "youtube.com/watch?v=") {
		parts := strings.Split(url, "v=")
		if len(parts) > 1 {
			videoID := strings.Split(parts[1], "&")[0]
			return videoID
		}
	} else if strings.Contains(url, "youtu.be/") {
		parts := strings.Split(url, "youtu.be/")
		if len(parts) > 1 {
			videoID := strings.Split(parts[1], "?")[0]
			return videoID
		}
	}
	return "unknown"
}

// IsValidYouTubeURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º YouTube URL
func IsValidYouTubeURL(url string) bool {
	return strings.Contains(url, "youtube.com/watch?v=") || 
		   strings.Contains(url, "youtu.be/") ||
		   strings.Contains(url, "youtube.com/embed/")
}

// SanitizeFilename –æ—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
func SanitizeFilename(filename string) string {
	// –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
	invalidChars := []string{"/", "\\", ":", "*", "?", "\"", "<", ">", "|"}
	result := filename
	
	for _, char := range invalidChars {
		result = strings.ReplaceAll(result, char, "_")
	}
	
	return result
}

// RetryWithBackoff –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
func RetryWithBackoff(operation func() error, maxRetries int, baseDelay time.Duration) error {
	var lastErr error
	
	for attempt := 0; attempt <= maxRetries; attempt++ {
		if attempt > 0 {
			// –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s, 8s, 16s
			delay := baseDelay * time.Duration(1<<uint(attempt-1))
			log.Printf("üîÑ –ü–æ–ø—ã—Ç–∫–∞ %d/%d —á–µ—Ä–µ–∑ %v...", attempt+1, maxRetries+1, delay)
			time.Sleep(delay)
		}
		
		err := operation()
		if err == nil {
			if attempt > 0 {
				log.Printf("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", attempt+1)
			}
			return nil
		}
		
		lastErr = err
		log.Printf("‚ùå –ü–æ–ø—ã—Ç–∫–∞ %d/%d –Ω–µ—É–¥–∞—á–Ω–∞: %v", attempt+1, maxRetries+1, err)
	}
	
	log.Printf("üí• –í—Å–µ %d –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã", maxRetries+1)
	return lastErr
}
