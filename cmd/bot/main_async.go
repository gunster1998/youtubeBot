package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	"youtubeBot/config"
	"youtubeBot/services"
)

// AsyncLocalBot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
type AsyncLocalBot struct {
	Token          string
	APIURL         string
	Client         *http.Client
	Username       string
	FirstName      string
	// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ —á–∞—Ç–∞–º
	formatCache    map[int64][]services.VideoFormat
	formatCacheMux sync.RWMutex
	// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL –≤–∏–¥–µ–æ –ø–æ —á–∞—Ç–∞–º
	videoURLCache  map[int64]string
	videoURLCacheMux sync.RWMutex
	// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube
	youtubeService *services.YouTubeService
	// –°–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ
	cacheService   *services.CacheService
	// –û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫
	downloadQueue  *services.DownloadQueue
	// –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	userJobs       map[int64]string // chatID -> jobID
	userJobsMux    sync.RWMutex
}

// NewAsyncLocalBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AsyncLocalBot
func NewAsyncLocalBot(token, apiURL string, timeout time.Duration, youtubeService *services.YouTubeService, cacheService *services.CacheService, downloadQueue *services.DownloadQueue) *AsyncLocalBot {
	return &AsyncLocalBot{
		Token:         token,
		APIURL:        apiURL,
		Client: &http.Client{
			Timeout: timeout,
		},
		formatCache:   make(map[int64][]services.VideoFormat),
		videoURLCache: make(map[int64]string),
		youtubeService: youtubeService,
		cacheService:  cacheService,
		downloadQueue: downloadQueue,
		userJobs:      make(map[int64]string),
	}
}

// GetMe –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
func (b *AsyncLocalBot) GetMe() error {
	resp, err := b.Client.Get(fmt.Sprintf("%s/bot%s/getMe", b.APIURL, b.Token))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getMe: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å getMe: %d", resp.StatusCode)
	}

	var result struct {
		OK     bool `json:"ok"`
		Result struct {
			Username  string `json:"username"`
			FirstName string `json:"first_name"`
		} `json:"result"`
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if err := json.Unmarshal(body, &result); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	if !result.OK {
		return fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
	}

	b.Username = result.Result.Username
	b.FirstName = result.Result.FirstName
	return nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *AsyncLocalBot) SendMessage(chatID int64, text string) error {
	message := map[string]interface{}{
		"chat_id": chatID,
		"text":    text,
	}

	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendMessage: %d", resp.StatusCode)
	}

	return nil
}

// SendVideo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª
func (b *AsyncLocalBot) SendVideo(chatID int64, videoPath, caption string) error {
	file, err := os.Open(videoPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	// –°–æ–∑–¥–∞–µ–º multipart form
	var buf bytes.Buffer
	writer := multipart.NewWriter(&buf)

	// –î–æ–±–∞–≤–ª—è–µ–º chat_id
	writer.WriteField("chat_id", fmt.Sprintf("%d", chatID))
	
	// –î–æ–±–∞–≤–ª—è–µ–º caption –µ—Å–ª–∏ –µ—Å—Ç—å
	if caption != "" {
		writer.WriteField("caption", caption)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	part, err := writer.CreateFormFile("video", filepath.Base(videoPath))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è form file: %v", err)
	}

	_, err = io.Copy(part, file)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	writer.Close()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendVideo", b.APIURL, b.Token),
		writer.FormDataContentType(),
		&buf,
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendVideo: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
	}

	return nil
}

// GetUpdates –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
func (b *AsyncLocalBot) GetUpdates(offset, limit, timeout int) ([]Update, error) {
	resp, err := b.Client.Get(fmt.Sprintf("%s/bot%s/getUpdates?offset=%d&limit=%d&timeout=%d", 
		b.APIURL, b.Token, offset, limit, timeout))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getUpdates: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å getUpdates: %d", resp.StatusCode)
	}

	var result struct {
		OK     bool     `json:"ok"`
		Result []Update `json:"result"`
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	if !result.OK {
		return nil, fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
	}

	return result.Result, nil
}

// handleYouTubeLink –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç YouTube —Å—Å—ã–ª–∫—É
func (b *AsyncLocalBot) handleYouTubeLink(chatID int64, videoURL string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.userJobsMux.Lock()
	if existingJobID, exists := b.userJobs[chatID]; exists {
		// –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É
		if err := b.downloadQueue.CancelJob(existingJobID); err != nil {
			log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É %s: %v", existingJobID, err)
		}
		delete(b.userJobs, chatID)
	}
	b.userJobsMux.Unlock()

	// –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
	b.formatCacheMux.Lock()
	delete(b.formatCache, chatID)
	b.formatCacheMux.Unlock()
	
	b.videoURLCacheMux.Lock()
	delete(b.videoURLCache, chatID)
	b.videoURLCacheMux.Unlock()

	log.Printf("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é YouTube —Å—Å—ã–ª–∫—É: %s", videoURL)
	b.SendMessage(chatID, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤
		formats, err := b.youtubeService.GetVideoFormats(videoURL)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ GetVideoFormats: %v", err)
			b.SendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤: %v", err))
			return
		}

		log.Printf("üìä –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: %d", len(formats))

		if len(formats) == 0 {
			log.Printf("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			b.SendMessage(chatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∏ URL –≤ –∫—ç—à–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
		b.formatCacheMux.Lock()
		b.formatCache[chatID] = formats
		b.formatCacheMux.Unlock()
		
		b.videoURLCacheMux.Lock()
		b.videoURLCache[chatID] = videoURL
		b.videoURLCacheMux.Unlock()

		log.Printf("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª –≤ –∫—ç—à: %d —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ URL: %s –¥–ª—è —á–∞—Ç–∞ %d", len(formats), videoURL, chatID)

		// –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ
		var audioFormats []services.VideoFormat
		var videoFormats []services.VideoFormat

		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
		resolutionGroups := make(map[string][]services.VideoFormat)

		for _, format := range formats {
			if format.Extension == "audio" {
				audioFormats = append(audioFormats, format)
			} else {
				// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
				resolutionGroups[format.Resolution] = append(resolutionGroups[format.Resolution], format)
			}
		}

		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û —Ñ–æ—Ä–º–∞—Ç—ã –° –ê–£–î–ò–û
		for _, formats := range resolutionGroups {
			if len(formats) == 0 {
				continue
			}
			
			// –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
			var audioFormat *services.VideoFormat
			for _, f := range formats {
				if f.HasAudio {
					audioFormat = &f
					break
				}
			}
			
			// –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ
			if audioFormat != nil {
				videoFormats = append(videoFormats, *audioFormat)
			}
		}

		log.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d –∞—É–¥–∏–æ –∏ %d –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤", len(audioFormats), len(videoFormats))

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã —Å –∞—É–¥–∏–æ
		if len(videoFormats) == 0 {
			log.Printf("‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ!")
			b.SendMessage(chatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")
			return
		}

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
		sortVideoFormatsByResolution(videoFormats)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
		if err := b.SendFormatTypeMenu(chatID, len(audioFormats), len(videoFormats)); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞: %v", err)
			b.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞")
		}
	}()
}

// handleFormatSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func (b *AsyncLocalBot) handleFormatSelection(chatID int64, formatID string) {
	// –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
	b.videoURLCacheMux.RLock()
	videoURL := b.videoURLCache[chatID]
	b.videoURLCacheMux.RUnlock()

	if videoURL == "" {
		log.Printf("‚ùå URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		b.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
	jobID, err := b.downloadQueue.AddJob(chatID, chatID, videoURL, formatID, 5) // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5 (—Å—Ä–µ–¥–Ω–∏–π)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å: %v", err)
		b.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –∑–∞–¥–∞—á–∞
	b.userJobsMux.Lock()
	b.userJobs[chatID] = jobID
	b.userJobsMux.Unlock()

	log.Printf("üìù –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", jobID, chatID)
	b.SendMessage(chatID, "‚è≥ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫. –û–∂–∏–¥–∞–π—Ç–µ...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏
	go b.monitorJob(chatID, jobID)
	
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
	go b.quickCheckForCachedVideo(chatID, jobID, videoURL, formatID)
}

// quickCheckForCachedVideo –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
func (b *AsyncLocalBot) quickCheckForCachedVideo(chatID int64, jobID, videoURL, formatID string) {
	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
	time.Sleep(1 * time.Second)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
	job, exists := b.downloadQueue.GetJobStatus(jobID)
	if !exists {
		// –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
		log.Printf("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–¥–∞—á–∞ %s —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è—é –∫—ç—à", jobID)
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–∞–ø—Ä—è–º—É—é
		videoID := extractVideoID(videoURL)
		if videoID != "" {
			if isCached, cachedVideo, err := b.cacheService.IsVideoCached(videoID, formatID); err == nil && isCached {
				log.Printf("‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞–π–¥–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–¥–∞—á–∏ %s", jobID)
				
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
				b.SendMessage(chatID, "‚úÖ –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
				if err := b.SendVideo(chatID, cachedVideo.FilePath, fmt.Sprintf("–í–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", formatID)); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ: %v", err)
					b.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")
				} else {
					b.SendMessage(chatID, "üéâ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
				}
				
				// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				b.userJobsMux.Lock()
				delete(b.userJobs, chatID)
				b.userJobsMux.Unlock()
				return
			}
		}
	} else if job.Status == services.JobStatusCompleted {
		// –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
		log.Printf("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–¥–∞—á–∞ %s —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", jobID)
		b.SendMessage(chatID, "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
		
		if err := b.SendVideo(chatID, job.Result, fmt.Sprintf("–í–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", job.FormatID)); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: %v", err)
			b.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")
		} else {
			b.SendMessage(chatID, "üéâ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
		}
		
		// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
		b.userJobsMux.Lock()
		delete(b.userJobs, chatID)
		b.userJobsMux.Unlock()
	}
}

// monitorJob –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
func (b *AsyncLocalBot) monitorJob(chatID int64, jobID string) {
	ticker := time.NewTicker(2 * time.Second) // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
	defer ticker.Stop()

	timeout := time.NewTimer(10 * time.Minute) // –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç
	defer timeout.Stop()

	for {
		select {
		case <-ticker.C:
			job, exists := b.downloadQueue.GetJobStatus(jobID)
			if !exists {
				// –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ)
				// –î–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
				log.Printf("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", jobID)
				
				// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				b.userJobsMux.Lock()
				delete(b.userJobs, chatID)
				b.userJobsMux.Unlock()
				return
			}

			switch job.Status {
			case services.JobStatusCompleted:
				log.Printf("‚úÖ –ó–∞–¥–∞—á–∞ %s –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", jobID)
				b.SendMessage(chatID, "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
				
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
				if err := b.SendVideo(chatID, job.Result, fmt.Sprintf("–í–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", job.FormatID)); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: %v", err)
					b.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")
				} else {
					b.SendMessage(chatID, "üéâ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
				}

				// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
				b.userJobsMux.Lock()
				delete(b.userJobs, chatID)
				b.userJobsMux.Unlock()
				return

			case services.JobStatusFailed:
				log.Printf("‚ùå –ó–∞–¥–∞—á–∞ %s –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: %v", jobID, job.Error)
				b.SendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: %v", job.Error))

				// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
				b.userJobsMux.Lock()
				delete(b.userJobs, chatID)
				b.userJobsMux.Unlock()
				return

			case services.JobStatusCancelled:
				log.Printf("‚ùå –ó–∞–¥–∞—á–∞ %s –æ—Ç–º–µ–Ω–µ–Ω–∞", jobID)
				b.SendMessage(chatID, "‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

				// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
				b.userJobsMux.Lock()
				delete(b.userJobs, chatID)
				b.userJobsMux.Unlock()
				return

			case services.JobStatusProcessing:
				// –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
				continue

			case services.JobStatusPending:
				// –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
				continue
			}

		case <-timeout.C:
			log.Printf("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ %s", jobID)
			b.SendMessage(chatID, "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

			// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
			b.userJobsMux.Lock()
			delete(b.userJobs, chatID)
			b.userJobsMux.Unlock()
			return
		}
	}
}

// SendFormatTypeMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ)
func (b *AsyncLocalBot) SendFormatTypeMenu(chatID int64, audioCount, videoCount int) error {
	log.Printf("üéØ –°–æ–∑–¥–∞—é –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞: –∞—É–¥–∏–æ=%d, –≤–∏–¥–µ–æ=%d", audioCount, videoCount)
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
	var keyboard [][]map[string]interface{}
	
	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	if audioCount > 0 {
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          "üéµ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã",
				"callback_data": "type_audio",
			},
		})
	}
	
	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	if videoCount > 0 {
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          "üé• –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã",
				"callback_data": "type_video",
			},
		})
	}
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// SendVideoFormatsOnly –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
func (b *AsyncLocalBot) SendVideoFormatsOnly(chatID int64, text string, formats []services.VideoFormat) error {
	log.Printf("üé• –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã (%d —à—Ç—É–∫)", len(formats))
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		icon := "üé•"
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (%d –∫–Ω–æ–ø–æ–∫)", len(keyboard))
	return nil
}

// SendAudioFormatsOnly –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã
func (b *AsyncLocalBot) SendAudioFormatsOnly(chatID int64, text string, formats []services.VideoFormat) error {
	log.Printf("üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã (%d —à—Ç—É–∫)", len(formats))
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		icon := "üéµ"
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (%d –∫–Ω–æ–ø–æ–∫)", len(keyboard))
	return nil
}

// AnswerCallbackQuery –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
func (b *AsyncLocalBot) AnswerCallbackQuery(callbackID string) error {
	message := map[string]interface{}{
		"callback_query_id": callbackID,
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ callback answer: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/answerCallbackQuery", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å callback answer: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	return nil
}

// Update –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
type Update struct {
	UpdateID int64   `json:"update_id"`
	Message  *Message `json:"message,omitempty"`
	CallbackQuery *CallbackQuery `json:"callback_query,omitempty"`
}

// CallbackQuery –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç callback –æ—Ç inline keyboard
type CallbackQuery struct {
	ID   string  `json:"id"`
	Data string  `json:"data"`
	Message *Message `json:"message"`
}

// Message –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
type Message struct {
	MessageID int64  `json:"message_id"`
	Text      string `json:"text"`
	Chat      Chat   `json:"chat"`
}

// Chat –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ Telegram
type Chat struct {
	ID int64 `json:"id"`
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.Load("config.env")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
	if cfg.TelegramToken == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.env")
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º Telegram API: %s\n", cfg.TelegramAPI)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º yt-dlp
	youtubeService := services.NewYouTubeService(cfg.DownloadDir)
	if err := youtubeService.CheckYtDlp(); err != nil {
		log.Fatalf("‚ùå %v", err)
	}
	fmt.Println("‚úÖ yt-dlp –¥–æ—Å—Ç—É–ø–µ–Ω")

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (20 –ì–ë)
	cacheService, err := services.NewCacheService("../cache", 20)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à-—Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}
	defer cacheService.Close()
	
	// –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫ —Å 3 –≤–æ—Ä–∫–µ—Ä–∞–º–∏
	downloadQueue := services.NewDownloadQueue(3, youtubeService, cacheService)
	downloadQueue.Start()
	defer downloadQueue.Stop()
	
	// –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
	bot := NewAsyncLocalBot(cfg.TelegramToken, cfg.TelegramAPI, time.Duration(cfg.HTTPTimeout)*time.Second, youtubeService, cacheService, downloadQueue)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Telegram API
	if err := bot.GetMe(); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Telegram API: %v", err)
	}

	fmt.Printf("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @%s (%s)\n", bot.Username, bot.FirstName)
	fmt.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: %s\n", cfg.TelegramAPI)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := youtubeService.CheckNetwork(); err != nil {
		log.Printf("‚ö†Ô∏è %v", err)
		fmt.Println("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é - –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
	} else {
		fmt.Println("‚úÖ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
	}

	fmt.Println("üé¨ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ getUpdates
	log.Printf("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ getUpdates...")
	
	offset := int64(0)
	for {
		select {
		case <-sigChan:
			fmt.Printf("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...\n")
			return
		default:
			// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			updates, err := bot.GetUpdates(int(offset), 100, 30)
			if err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
				time.Sleep(5 * time.Second)
				continue
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			for _, update := range updates {
				if update.UpdateID >= offset {
					offset = update.UpdateID + 1
				}

				if update.Message != nil {
					message := update.Message
					log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s –æ—Ç —á–∞—Ç–∞ %d", message.Text, message.Chat.ID)
					
					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
					if message.Text == "/start" {
						bot.SendMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
					} else if len(message.Text) > 10 && (strings.Contains(message.Text, "youtube.com") || strings.Contains(message.Text, "youtu.be")) {
						// YouTube —Å—Å—ã–ª–∫–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
						bot.handleYouTubeLink(message.Chat.ID, message.Text)
					} else {
						bot.SendMessage(message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
					}
				} else if update.CallbackQuery != nil {
					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç inline keyboard
					callback := update.CallbackQuery
					log.Printf("üéØ –ü–æ–ª—É—á–µ–Ω callback: %s", callback.Data)
					
					if callback.Data == "type_audio" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã
						log.Printf("üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã")
						bot.AnswerCallbackQuery(callback.ID)
						
						// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
						bot.formatCacheMux.RLock()
						formats := bot.formatCache[callback.Message.Chat.ID]
						bot.formatCacheMux.RUnlock()
						
						var audioFormats []services.VideoFormat
						for _, format := range formats {
							if format.Extension == "audio" {
								audioFormats = append(audioFormats, format)
							}
						}
						
						if len(audioFormats) > 0 {
							bot.SendAudioFormatsOnly(callback.Message.Chat.ID, "üéµ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã:", audioFormats)
						} else {
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
						}
						
					} else if callback.Data == "type_video" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
						log.Printf("üé• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã")
						bot.AnswerCallbackQuery(callback.ID)
						
						// –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –∫—ç—à–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
						bot.formatCacheMux.RLock()
						formats := bot.formatCache[callback.Message.Chat.ID]
						bot.formatCacheMux.RUnlock()
						
						// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
						resolutionGroups := make(map[string][]services.VideoFormat)
						
						for _, format := range formats {
							if format.Extension != "audio" {
								resolutionGroups[format.Resolution] = append(resolutionGroups[format.Resolution], format)
							}
						}
						
						// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ–º –õ–£–ß–®–ò–ô —Ñ–æ—Ä–º–∞—Ç
						var videoFormats []services.VideoFormat
						for _, formatList := range resolutionGroups {
							if len(formatList) == 0 {
								continue
							}
							
							// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
							sort.Slice(formatList, func(i, j int) bool {
								sizeI := parseFileSize(formatList[i].FileSize)
								sizeJ := parseFileSize(formatList[j].FileSize)
								return sizeI < sizeJ
							})
							
							// –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
							var bestFormat *services.VideoFormat
							
							// –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ
							for _, f := range formatList {
								if f.HasAudio {
									bestFormat = &f
									break
								}
							}
							
							// –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å –∞—É–¥–∏–æ, –±–µ—Ä–µ–º —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π
							if bestFormat == nil {
								bestFormat = &formatList[0]
							}
							
							videoFormats = append(videoFormats, *bestFormat)
						}
						
						// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
						sortVideoFormatsByResolution(videoFormats)
						
						if len(videoFormats) > 0 {
							bot.SendVideoFormatsOnly(callback.Message.Chat.ID, "üé• –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã:", videoFormats)
						} else {
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")
						}
						
					} else if strings.HasPrefix(callback.Data, "format_") {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç
						parts := strings.Split(callback.Data, "_")
						if len(parts) >= 2 {
							formatID := parts[1]
							log.Printf("üìπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç: %s", formatID)
							bot.AnswerCallbackQuery(callback.ID)
							
							// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
							bot.handleFormatSelection(callback.Message.Chat.ID, formatID)
						}
					}
				}
			}

			// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
			time.Sleep(1 * time.Second)
		}
	}
}

// parseFileSize –ø–∞—Ä—Å–∏—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç—ã
func parseFileSize(fileSize string) int64 {
	if fileSize == "" {
		return 0
	}
	
	fileSize = strings.TrimSpace(fileSize)
	
	var multiplier float64 = 1
	var sizeStr string
	
	if strings.HasSuffix(fileSize, "GiB") {
		multiplier = 1024 * 1024 * 1024
		sizeStr = strings.TrimSuffix(fileSize, "GiB")
	} else if strings.HasSuffix(fileSize, "MiB") {
		multiplier = 1024 * 1024
		sizeStr = strings.TrimSuffix(fileSize, "MiB")
	} else if strings.HasSuffix(fileSize, "KiB") {
		multiplier = 1024
		sizeStr = strings.TrimSuffix(fileSize, "KiB")
	} else if strings.HasSuffix(fileSize, "B") {
		multiplier = 1
		sizeStr = strings.TrimSuffix(fileSize, "B")
	} else {
		if size, err := strconv.ParseFloat(fileSize, 64); err == nil {
			return int64(size)
		}
		return 0
	}
	
	if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
		return int64(size * multiplier)
	}
	
	return 0
}

// sortVideoFormatsByResolution —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
func sortVideoFormatsByResolution(formats []services.VideoFormat) {
	sort.Slice(formats, func(i, j int) bool {
		resI := extractResolutionNumber(formats[i].Resolution)
		resJ := extractResolutionNumber(formats[j].Resolution)
		return resI < resJ
	})
}

// extractResolutionNumber –∏–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
func extractResolutionNumber(resolution string) int {
	re := regexp.MustCompile(`(\d+)`)
	matches := re.FindStringSubmatch(resolution)
	if len(matches) > 1 {
		if num, err := strconv.ParseFloat(matches[1], 64); err == nil {
			return int(num)
		}
	}
	return 0
}

// extractVideoID –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL
func extractVideoID(url string) string {
	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã YouTube URL
	patterns := []string{
		`youtube\.com/watch\?v=([a-zA-Z0-9_-]+)`,
		`youtu\.be/([a-zA-Z0-9_-]+)`,
		`youtube\.com/embed/([a-zA-Z0-9_-]+)`,
	}

	for _, pattern := range patterns {
		re := regexp.MustCompile(pattern)
		matches := re.FindStringSubmatch(url)
		if len(matches) > 1 {
			return matches[1]
		}
	}

	return ""
}
