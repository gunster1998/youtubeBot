package main

import (
	"log"
	"net/http"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"youtubeBot/config"
	"youtubeBot/handlers"
	"youtubeBot/services"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.Load("config.env")
	if err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.env: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ yt-dlp
	youtubeService := services.NewYouTubeService(cfg.DownloadDir)
	if err := youtubeService.CheckYtDlp(); err != nil {
		log.Fatal(err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token := cfg.TelegramToken
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	log.Printf("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: %s...", token[:10]+"...")

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
	client := &http.Client{
		Timeout: time.Duration(cfg.HTTPTimeout) * time.Second,
	}

	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
	api.Client = client

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	handler := handlers.NewTelegramHandler(api, youtubeService)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	startBot(api, handler)
}

// startBot –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func startBot(api *tgbotapi.BotAPI, handler *handlers.TelegramHandler) {
	log.Printf("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", api.Self.UserName)
	log.Printf("üìù –ò–º—è –±–æ—Ç–∞: %s", api.Self.FirstName)
	log.Printf("üÜî ID –±–æ—Ç–∞: %d", api.Self.ID)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = cfg.TelegramTimeout // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	updates := api.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	for update := range updates {
		if update.Message != nil {
			log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (%d): %s",
				update.Message.From.UserName,
				update.Message.From.ID,
				update.Message.Text)

			go handler.HandleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
			log.Printf("üîò –ü–æ–ª—É—á–µ–Ω callback: %s", update.CallbackQuery.Data)
			go handler.HandleCallback(update.CallbackQuery)
		}
	}
}
