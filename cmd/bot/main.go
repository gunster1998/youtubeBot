package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"os/exec"
	"os/signal"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"
	"unicode/utf8"

	"youtubeBot/config"
	"youtubeBot/internal/netx"
	"youtubeBot/services"
)

// LocalBot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º Telegram API
type LocalBot struct {
	Token    string
	APIURL   string
	Client   *http.Client
	LocalClient *http.Client // –ü—Ä—è–º–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
	Username string
	FirstName string
	
	// Thread-safe –∫—ç—à–∏ —Å –º—å—é—Ç–µ–∫—Å–∞–º–∏
	formatCache    map[int64][]services.VideoFormat
	formatMutex    sync.RWMutex
	videoURLCache  map[int64]string
	videoMutex     sync.RWMutex
	platformCache  map[int64]string
	platformMutex  sync.RWMutex
	lastRequestTime map[int64]time.Time
	requestMutex   sync.RWMutex
	
	// Worker pool –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
	workerPool     chan struct{}
	downloadPool   chan struct{}
	
	// Rate limiting
	rateLimiter    map[int64]*time.Timer
	rateMutex      sync.RWMutex
	
	// –°–µ—Ä–≤–∏—Å—ã
	youtubeService *services.YouTubeService
	universalService *services.UniversalService
	cacheService *services.CacheService
	
	// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	metrics *BotMetrics
	metricsMutex sync.RWMutex
	
	// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	adminIDs map[int64]bool
	adminMutex sync.RWMutex
	
	// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx    context.Context
	cancel context.CancelFunc
}

// BotMetrics —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
type BotMetrics struct {
	StartTime        time.Time
	TotalRequests    int64
	SuccessfulRequests int64
	FailedRequests   int64
	TotalDownloads   int64
	TotalErrors      int64
	AverageResponseTime time.Duration
	LastActivity     time.Time
}

// NewLocalBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LocalBot
func NewLocalBot(token, apiURL string, timeout time.Duration, youtubeService *services.YouTubeService, universalService *services.UniversalService, cacheService *services.CacheService, proxyConfig *config.ProxyConfig) *LocalBot {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	
	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	adminIDs := make(map[int64]bool)
	adminIDs[6717533619] = true  // –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
	adminIDs[234549643] = true   // –í—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
	
	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	httpClient := netx.NewHTTPClient()
	log.Printf("üåê HTTP –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å SOCKS5 –ø—Ä–æ–∫—Å–∏")
	
	// –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Telegram API
	localClient := netx.NewDirectHTTPClient()
	log.Printf("üåê –ü—Ä—è–º–æ–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API")
	
	bot := &LocalBot{
		Token:  token,
		APIURL: apiURL,
		Client: httpClient,
		LocalClient: localClient,
		// Thread-safe –∫—ç—à–∏
		formatCache:    make(map[int64][]services.VideoFormat),
		videoURLCache:  make(map[int64]string),
		platformCache:  make(map[int64]string),
		lastRequestTime: make(map[int64]time.Time),
		rateLimiter:    make(map[int64]*time.Timer),
		
		// Worker pools (–º–∞–∫—Å–∏–º—É–º 50 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, 10 –∑–∞–≥—Ä—É–∑–æ–∫)
		workerPool:   make(chan struct{}, 50),
		downloadPool: make(chan struct{}, 10),
		
		// –°–µ—Ä–≤–∏—Å—ã
		youtubeService: youtubeService,
		universalService: universalService,
		cacheService: cacheService,
		
		// –ú–µ—Ç—Ä–∏–∫–∏
		metrics: &BotMetrics{
			StartTime: time.Now(),
			LastActivity: time.Now(),
		},
		adminIDs: adminIDs,
		ctx:    ctx,
		cancel: cancel,
	}
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
	go bot.startCacheCleanup()
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	go bot.startMetricsMonitoring()
	
	return bot
}

// GetMe –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
func (b *LocalBot) GetMe() error {
	resp, err := b.LocalClient.Get(fmt.Sprintf("%s/bot%s/getMe", b.APIURL, b.Token))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getMe: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å getMe: %d", resp.StatusCode)
	}

	var result struct {
		OK     bool `json:"ok"`
		Result struct {
			Username  string `json:"username"`
			FirstName string `json:"first_name"`
		} `json:"result"`
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if err := json.Unmarshal(body, &result); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	if !result.OK {
		return fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
	}

	b.Username = result.Result.Username
	b.FirstName = result.Result.FirstName
	return nil
}

// Thread-safe –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∞–º–∏

// setFormatCache thread-safe —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
func (b *LocalBot) setFormatCache(chatID int64, formats []services.VideoFormat) {
	b.formatMutex.Lock()
	defer b.formatMutex.Unlock()
	b.formatCache[chatID] = formats
}

// getFormatCache thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤
func (b *LocalBot) getFormatCache(chatID int64) ([]services.VideoFormat, bool) {
	b.formatMutex.RLock()
	defer b.formatMutex.RUnlock()
	formats, exists := b.formatCache[chatID]
	return formats, exists
}

// setVideoURLCache thread-safe —É—Å—Ç–∞–Ω–æ–≤–∫–∞ URL –≤–∏–¥–µ–æ
func (b *LocalBot) setVideoURLCache(chatID int64, url string) {
	b.videoMutex.Lock()
	defer b.videoMutex.Unlock()
	b.videoURLCache[chatID] = url
}

// getVideoURLCache thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ URL –≤–∏–¥–µ–æ
func (b *LocalBot) getVideoURLCache(chatID int64) (string, bool) {
	b.videoMutex.RLock()
	defer b.videoMutex.RUnlock()
	url, exists := b.videoURLCache[chatID]
	return url, exists
}

// setPlatformCache thread-safe —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func (b *LocalBot) setPlatformCache(chatID int64, platform string) {
	b.platformMutex.Lock()
	defer b.platformMutex.Unlock()
	b.platformCache[chatID] = platform
}

// getPlatformCache thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func (b *LocalBot) getPlatformCache(chatID int64) (string, bool) {
	b.platformMutex.RLock()
	defer b.platformMutex.RUnlock()
	platform, exists := b.platformCache[chatID]
	return platform, exists
}

// setLastRequestTime thread-safe —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
func (b *LocalBot) setLastRequestTime(chatID int64, t time.Time) {
	b.requestMutex.Lock()
	defer b.requestMutex.Unlock()
	b.lastRequestTime[chatID] = t
}

// getLastRequestTime thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
func (b *LocalBot) getLastRequestTime(chatID int64) (time.Time, bool) {
	b.requestMutex.RLock()
	defer b.requestMutex.RUnlock()
	t, exists := b.lastRequestTime[chatID]
	return t, exists
}

// clearCacheForChat thread-safe –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è —á–∞—Ç–∞
func (b *LocalBot) clearCacheForChat(chatID int64) {
	b.formatMutex.Lock()
	delete(b.formatCache, chatID)
	b.formatMutex.Unlock()
	
	b.videoMutex.Lock()
	delete(b.videoURLCache, chatID)
	b.videoMutex.Unlock()
	
	b.platformMutex.Lock()
	delete(b.platformCache, chatID)
	b.platformMutex.Unlock()
	
	b.requestMutex.Lock()
	delete(b.lastRequestTime, chatID)
	b.requestMutex.Unlock()
}

// Rate limiting –º–µ—Ç–æ–¥—ã

// isRateLimited –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
func (b *LocalBot) isRateLimited(chatID int64) bool {
	b.rateMutex.RLock()
	defer b.rateMutex.RUnlock()
	
	if lastTime, exists := b.getLastRequestTime(chatID); exists {
		return time.Since(lastTime) < 5*time.Second // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
	}
	return false
}

// setRateLimit —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *LocalBot) setRateLimit(chatID int64) {
	b.rateMutex.Lock()
	defer b.rateMutex.Unlock()
	
	// –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
	if timer, exists := b.rateLimiter[chatID]; exists {
		timer.Stop()
	}
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
	b.rateLimiter[chatID] = time.AfterFunc(5*time.Second, func() {
		b.rateMutex.Lock()
		delete(b.rateLimiter, chatID)
		b.rateMutex.Unlock()
	})
}

// Worker pool –º–µ—Ç–æ–¥—ã

// acquireWorker –ø–æ–ª—É—á–∞–µ—Ç worker –∏–∑ pool
func (b *LocalBot) acquireWorker() {
	select {
	case b.workerPool <- struct{}{}:
		// Worker –ø–æ–ª—É—á–µ–Ω
	case <-b.ctx.Done():
		// –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω
		return
	}
}

// releaseWorker –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç worker
func (b *LocalBot) releaseWorker() {
	select {
	case <-b.workerPool:
		// Worker –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
	default:
		// –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
	}
}

// acquireDownload –ø–æ–ª—É—á–∞–µ—Ç download slot
func (b *LocalBot) acquireDownload() {
	select {
	case b.downloadPool <- struct{}{}:
		// Download slot –ø–æ–ª—É—á–µ–Ω
	case <-b.ctx.Done():
		// –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω
		return
	}
}

// releaseDownload –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç download slot
func (b *LocalBot) releaseDownload() {
	select {
	case <-b.downloadPool:
		// Download slot –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
	default:
		// –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
	}
}

// –ú–µ—Ç—Ä–∏–∫–∏

// updateMetrics thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
func (b *LocalBot) updateMetrics(requests, successful, failed, downloads, errors int64, responseTime time.Duration) {
	b.metricsMutex.Lock()
	defer b.metricsMutex.Unlock()
	
	b.metrics.TotalRequests += requests
	b.metrics.SuccessfulRequests += successful
	b.metrics.FailedRequests += failed
	b.metrics.TotalDownloads += downloads
	b.metrics.TotalErrors += errors
	b.metrics.LastActivity = time.Now()
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
	if b.metrics.TotalRequests > 0 {
		totalTime := b.metrics.AverageResponseTime * time.Duration(b.metrics.TotalRequests-1)
		b.metrics.AverageResponseTime = (totalTime + responseTime) / time.Duration(b.metrics.TotalRequests)
	} else {
		b.metrics.AverageResponseTime = responseTime
	}
}

// getMetrics thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
func (b *LocalBot) getMetrics() BotMetrics {
	b.metricsMutex.RLock()
	defer b.metricsMutex.RUnlock()
	return *b.metrics
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π

// startCacheCleanup –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–µ–π
func (b *LocalBot) startCacheCleanup() {
	ticker := time.NewTicker(5 * time.Minute)
	defer ticker.Stop()
	
	for {
		select {
		case <-ticker.C:
			b.cleanupOldCache()
		case <-b.ctx.Done():
			return
		}
	}
}

// cleanupOldCache –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–µ–π
func (b *LocalBot) cleanupOldCache() {
	now := time.Now()
	cutoff := now.Add(-30 * time.Minute) // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç
	
	// –û—á–∏—â–∞–µ–º formatCache
	b.formatMutex.Lock()
	for chatID, lastTime := range b.lastRequestTime {
		if lastTime.Before(cutoff) {
			delete(b.formatCache, chatID)
			delete(b.videoURLCache, chatID)
			delete(b.platformCache, chatID)
			delete(b.lastRequestTime, chatID)
		}
	}
	b.formatMutex.Unlock()
	
	log.Printf("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// startMetricsMonitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func (b *LocalBot) startMetricsMonitoring() {
	ticker := time.NewTicker(1 * time.Minute)
	defer ticker.Stop()
	
	for {
		select {
		case <-ticker.C:
			metrics := b.getMetrics()
			uptime := time.Since(metrics.StartTime)
			
			log.Printf("üìä –ú–ï–¢–†–ò–ö–ò: Uptime=%v, Requests=%d, Downloads=%d, Errors=%d, AvgResponse=%v",
				uptime, metrics.TotalRequests, metrics.TotalDownloads, metrics.TotalErrors, metrics.AverageResponseTime)
		case <-b.ctx.Done():
			return
		}
	}
}

// Graceful shutdown

// Shutdown gracefully –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (b *LocalBot) Shutdown() {
	log.Printf("üõë –ù–∞—á–∏–Ω–∞—é graceful shutdown...")
	b.cancel()
	
	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö worker'–æ–≤
	for i := 0; i < cap(b.workerPool); i++ {
		b.workerPool <- struct{}{}
	}
	
	for i := 0; i < cap(b.downloadPool); i++ {
		b.downloadPool <- struct{}{}
	}
	
	log.Printf("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *LocalBot) SendMessage(chatID int64, text string) error {
	message := map[string]interface{}{
		"chat_id": chatID,
		"text":    text,
	}

	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendMessage: %d", resp.StatusCode)
	}

	return nil
}

// ClearChatHistory –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞)
func (b *LocalBot) ClearChatHistory(chatID int64) error {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
	updates, err := b.GetUpdates(0, 100, 0)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
	for _, update := range updates {
		if update.Message != nil && update.Message.Chat.ID == chatID {
			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
			deleteMessage := map[string]interface{}{
				"chat_id":    chatID,
				"message_id": update.Message.MessageID,
			}

			jsonData, err := json.Marshal(deleteMessage)
			if err != nil {
				continue
			}

			resp, err := b.LocalClient.Post(
				fmt.Sprintf("%s/bot%s/deleteMessage", b.APIURL, b.Token),
				"application/json",
				bytes.NewBuffer(jsonData),
			)
			if err != nil {
				continue
			}
			resp.Body.Close()
		}
	}

	log.Printf("üßπ –û—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ %d", chatID)
	return nil
}

// SendVideoPreview –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π
func (b *LocalBot) SendVideoPreview(chatID int64, metadata *services.VideoMetadata) error {
	log.Printf("üé¨ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–≤—å—é –¥–ª—è —á–∞—Ç–∞ %d", chatID)
	log.Printf("üé¨ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: Title=%s, Author=%s, Thumbnail=%s", metadata.Title, metadata.Author, metadata.Thumbnail)
	
	// –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–µ–≤—å—é
	previewText := fmt.Sprintf(`üé¨ **%s**

üë§ **–ê–≤—Ç–æ—Ä:** %s
‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** %s
üëÅÔ∏è **–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** %s
üìÖ **–î–∞—Ç–∞:** %s

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
%s

üîó –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:`, 
		metadata.Title,
		metadata.Author,
		metadata.Duration,
		metadata.Views,
		metadata.UploadDate,
		metadata.Description)
	
	// –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
	if metadata.Thumbnail != "" {
		log.Printf("üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–≤—å—é —Å –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π: %s", metadata.Thumbnail)
		log.Printf("üñºÔ∏è –¢–µ–∫—Å—Ç –ø—Ä–µ–≤—å—é: %s", previewText)
		err := b.SendPhoto(chatID, metadata.Thumbnail, previewText)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ SendPhoto: %v", err)
			return err
		}
		log.Printf("‚úÖ SendPhoto –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
		return nil
	}
	
	// –ï—Å–ª–∏ –Ω–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
	log.Printf("‚ö†Ô∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
	err := b.SendMessage(chatID, previewText)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ SendMessage: %v", err)
		return err
	}
	log.Printf("‚úÖ SendMessage –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// SendVideo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª
func (b *LocalBot) SendVideo(chatID int64, videoPath, caption string) error {
	log.Printf("üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ: chatID=%d, path=%s", chatID, videoPath)
	
	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
	if !b.validateVideoFile(videoPath) {
		return fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: %s", videoPath)
	}
	
	file, err := os.Open(videoPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
	fileInfo, err := file.Stat()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º multipart form
	var buf bytes.Buffer
	writer := multipart.NewWriter(&buf)

	// –î–æ–±–∞–≤–ª—è–µ–º chat_id
	writer.WriteField("chat_id", fmt.Sprintf("%d", chatID))
	
	// Caption —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
	botCaption := caption
	writer.WriteField("caption", botCaption)

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
	duration := b.getVideoDuration(videoPath)
	if duration > 0 {
		writer.WriteField("duration", fmt.Sprintf("%d", duration))
		log.Printf("‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d —Å–µ–∫—É–Ω–¥", duration)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
	thumbnailPath := b.getVideoThumbnail(videoPath)
	if thumbnailPath != "" {
		// –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –∫–∞–∫ —Ñ–∞–π–ª
		thumbFile, err := os.Open(thumbnailPath)
		if err == nil {
			defer thumbFile.Close()
			thumbWriter, err := writer.CreateFormFile("thumbnail", filepath.Base(thumbnailPath))
			if err == nil {
				io.Copy(thumbWriter, thumbFile)
				log.Printf("üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞: %s", thumbnailPath)
			}
		}
		// –£–¥–∞–ª—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
		defer func() {
			if err := os.Remove(thumbnailPath); err != nil {
				log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É: %v", err)
			} else {
				log.Printf("üóëÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —É–¥–∞–ª–µ–Ω–∞: %s", thumbnailPath)
			}
		}()
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	writer.WriteField("file_size", fmt.Sprintf("%d", fileInfo.Size()))

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	part, err := writer.CreateFormFile("video", filepath.Base(videoPath))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è form file: %v", err)
	}

	_, err = io.Copy(part, file)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	writer.Close()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendVideo", b.APIURL, b.Token),
		writer.FormDataContentType(),
		&buf,
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ sendVideo: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendVideo: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
	}

	log.Printf("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ —Å –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
	return nil
}

// SendAudio –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª
func (b *LocalBot) SendAudio(chatID int64, audioPath, caption string) error {
	log.Printf("üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ: chatID=%d, path=%s", chatID, audioPath)
	
	file, err := os.Open(audioPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
	fileInfo, err := file.Stat()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º multipart form
	var buf bytes.Buffer
	writer := multipart.NewWriter(&buf)

	// –î–æ–±–∞–≤–ª—è–µ–º chat_id
	writer.WriteField("chat_id", fmt.Sprintf("%d", chatID))
	
	// Caption
	writer.WriteField("caption", caption)

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
	duration := b.getVideoDuration(audioPath)
	if duration > 0 {
		writer.WriteField("duration", fmt.Sprintf("%d", duration))
		log.Printf("‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d —Å–µ–∫—É–Ω–¥", duration)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	writer.WriteField("file_size", fmt.Sprintf("%d", fileInfo.Size()))

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	part, err := writer.CreateFormFile("audio", filepath.Base(audioPath))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è form file: %v", err)
	}

	_, err = io.Copy(part, file)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	writer.Close()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendAudio", b.APIURL, b.Token),
		writer.FormDataContentType(),
		&buf,
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ sendAudio: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendAudio: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
	}

	log.Printf("‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// getVideoDuration –ø–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
func (b *LocalBot) getVideoDuration(videoPath string) int {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º ffprobe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	// –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è ffprobe
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	
	cmd := exec.CommandContext(ctx, "ffprobe", "-v", "quiet", "-show_entries", "format=duration", "-of", "csv=p=0", videoPath)
	output, err := cmd.Output()
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: %v", err)
		return 0
	}
	
	durationStr := strings.TrimSpace(string(output))
	duration, err := strconv.ParseFloat(durationStr, 64)
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v", err)
		return 0
	}
	
	return int(duration)
}

// getVideoThumbnail –ø–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –º–∏–Ω–∏–∞—Ç—é—Ä–µ –≤–∏–¥–µ–æ
func (b *LocalBot) getVideoThumbnail(videoPath string) string {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
	dir := filepath.Dir(videoPath)
	base := filepath.Base(videoPath)
	ext := filepath.Ext(base)
	name := strings.TrimSuffix(base, ext)
	thumbnailPath := filepath.Join(dir, name+"_thumb.jpg")
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É —Å –ø–æ–º–æ—â—å—é ffmpeg
	// –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è ffmpeg
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	
	cmd := exec.CommandContext(ctx, "ffmpeg", "-i", videoPath, "-ss", "00:00:01", "-vframes", "1", "-q:v", "2", thumbnailPath)
	err := cmd.Run()
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É: %v", err)
		return ""
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
	if _, err := os.Stat(thumbnailPath); err == nil {
		log.Printf("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞: %s", thumbnailPath)
		return thumbnailPath
	}
	
	return ""
}

// GetUpdates –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
func (b *LocalBot) GetUpdates(offset, limit, timeout int) ([]Update, error) {
	resp, err := b.LocalClient.Get(fmt.Sprintf("%s/bot%s/getUpdates?offset=%d&limit=%d&timeout=%d", 
		b.APIURL, b.Token, offset, limit, timeout))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getUpdates: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å getUpdates: %d", resp.StatusCode)
	}

	var result struct {
		OK     bool     `json:"ok"`
		Result []Update `json:"result"`
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	if !result.OK {
		return nil, fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
	}

	return result.Result, nil
}

// SendFormatTypeMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ)
func (b *LocalBot) SendFormatTypeMenu(chatID int64, audioCount, videoCount int) error {
	log.Printf("üéØ –°–æ–∑–¥–∞—é –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞: –∞—É–¥–∏–æ=%d, –≤–∏–¥–µ–æ=%d", audioCount, videoCount)
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
	var keyboard [][]map[string]interface{}
	
	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	if audioCount > 0 {
		log.Printf("üéµ –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (%d)", audioCount)
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          "üéµ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã",
				"callback_data": "type_audio",
			},
		})
	} else {
		log.Printf("‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–µ—Ç, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è")
	}
	
	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	if videoCount > 0 {
		log.Printf("üé• –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (%d)", videoCount)
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          "üé• –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã",
				"callback_data": "type_video",
			},
		})
	} else {
		log.Printf("‚ö†Ô∏è –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–µ—Ç, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è")
	}
	
	// –ö–Ω–æ–ø–∫–∞ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ" - —É–±–∏—Ä–∞–µ–º –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	// log.Printf("‚ö° –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
	// keyboard = append(keyboard, []map[string]interface{}{
	// 	{
	// 		"text":          "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ (–∏–∑ –∫—ç—à–∞)",
	// 		"callback_data": "instant_best",
	// 	},
	// })
	
	log.Printf("üìã –ò—Ç–æ–≥–æ–≤—ã–π keyboard: %d –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ)", len(keyboard))
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// SendPhoto –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
func (b *LocalBot) SendPhoto(chatID int64, photoURL, caption string) error {
	log.Printf("üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ: chatID=%d, URL=%s", chatID, photoURL)
	log.Printf("üì∏ –ü–æ–¥–ø–∏—Å—å: %s", caption)
	
	message := map[string]interface{}{
		"chat_id": chatID,
		"photo":   photoURL,
		"caption": caption,
		"parse_mode": "Markdown",
	}

	jsonData, err := json.Marshal(message)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	
	log.Printf("üì∏ JSON –¥–∞–Ω–Ω—ã–µ: %s", string(jsonData))

	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendPhoto", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: %v", err)
	}
	defer resp.Body.Close()

	log.Printf("üì∏ HTTP —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: %s", string(body))
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendPhoto: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
	}

	log.Printf("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// SendPhotoFromFile –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
func (b *LocalBot) SendPhotoFromFile(chatID int64, filePath, caption string) error {
	log.Printf("üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞: chatID=%d, filePath=%s", chatID, filePath)
	log.Printf("üì∏ –ü–æ–¥–ø–∏—Å—å: %s", caption)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		log.Printf("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filePath)
		return fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filePath)
	}
	
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
	file, err := os.Open(filePath)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()
	
	// –°–æ–∑–¥–∞–µ–º multipart form
	var buf bytes.Buffer
	writer := multipart.NewWriter(&buf)
	
	// –î–æ–±–∞–≤–ª—è–µ–º chat_id
	writer.WriteField("chat_id", fmt.Sprintf("%d", chatID))
	
	// –î–æ–±–∞–≤–ª—è–µ–º caption
	writer.WriteField("caption", caption)
	writer.WriteField("parse_mode", "Markdown")
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	part, err := writer.CreateFormFile("photo", filepath.Base(filePath))
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è form file: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è form file: %v", err)
	}
	
	_, err = io.Copy(part, file)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	
	writer.Close()
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", 
		fmt.Sprintf("%s/bot%s/sendPhoto", b.APIURL, b.Token), &buf)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	
	req.Header.Set("Content-Type", writer.FormDataContentType())
	
	resp, err := b.LocalClient.Do(req)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: %v", err)
	}
	defer resp.Body.Close()

	log.Printf("üì∏ HTTP —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: %s", string(body))
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendPhoto: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
	}

	log.Printf("‚úÖ –§–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// SendMediaGroup –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
func (b *LocalBot) SendMediaGroup(chatID int64, mediaFiles []string) error {
	log.Printf("üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É: chatID=%d, —Ñ–∞–π–ª–æ–≤=%d", chatID, len(mediaFiles))
	
	if len(mediaFiles) == 0 {
		return fmt.Errorf("–Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
	}
	
	// –°–æ–∑–¥–∞–µ–º multipart form
	var buf bytes.Buffer
	writer := multipart.NewWriter(&buf)
	
	// –î–æ–±–∞–≤–ª—è–µ–º chat_id
	writer.WriteField("chat_id", fmt.Sprintf("%d", chatID))
	
	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
	var mediaArray []map[string]interface{}
	for i, filePath := range mediaFiles {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		if _, err := os.Stat(filePath); os.IsNotExist(err) {
			log.Printf("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filePath)
			continue
		}
		
		mediaItem := map[string]interface{}{
			"type": "photo",
			"media": fmt.Sprintf("attach://photo_%d", i),
		}
		mediaArray = append(mediaArray, mediaItem)
	}
	
	if len(mediaArray) == 0 {
		return fmt.Errorf("–Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º media –∫–∞–∫ JSON
	mediaJSON, err := json.Marshal(mediaArray)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ media: %v", err)
	}
	writer.WriteField("media", string(mediaJSON))
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
	for i, filePath := range mediaFiles {
		if _, err := os.Stat(filePath); os.IsNotExist(err) {
			continue
		}
		
		file, err := os.Open(filePath)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ %s: %v", filePath, err)
			continue
		}
		
		part, err := writer.CreateFormFile(fmt.Sprintf("photo_%d", i), filepath.Base(filePath))
		if err != nil {
			file.Close()
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è form file: %v", err)
			continue
		}
		
		_, err = io.Copy(part, file)
		file.Close()
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
			continue
		}
	}
	
	writer.Close()
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", 
		fmt.Sprintf("%s/bot%s/sendMediaGroup", b.APIURL, b.Token), &buf)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	
	req.Header.Set("Content-Type", writer.FormDataContentType())
	
	resp, err := b.LocalClient.Do(req)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: %v", err)
	}
	defer resp.Body.Close()

	log.Printf("üì∏ HTTP —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: %s", string(body))
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendMediaGroup: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
	}

	log.Printf("‚úÖ –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// SendWelcomeMessageWithImages –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
func (b *LocalBot) SendWelcomeMessageWithImages(chatID int64) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	welcomeText := `üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø ChillYouTube Bot!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
/version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏

üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
üé¨ YouTube
üé¨ YouTube Shorts

üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? üîΩ`
	
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é
	coverPath := "assets/images/welcome_cover.png"
	if err := b.SendPhotoFromFile(chatID, coverPath, welcomeText); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É (%v). –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.", err)
		if err := b.SendMessage(chatID, welcomeText); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return err
		}
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
	imageFiles := []string{
		"assets/images/step1_send_link.png",
		"assets/images/step2_choose_format.png", 
		"assets/images/step3_done.png",
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
	if err := b.SendMediaGroup(chatID, imageFiles); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: %v", err)
		// Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
		log.Printf("üîÑ Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É...")
		for i, filePath := range imageFiles {
			captions := []string{
				"**1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ",
				"**2. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ 4K**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞", 
				"**3. –ì–æ—Ç–æ–≤–æ!**\n\n–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
			}
			if err := b.SendPhotoFromFile(chatID, filePath, captions[i]); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è %d: %v", i+1, err)
			}
			time.Sleep(500 * time.Millisecond)
		}
	}
	
	log.Printf("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// SendVideoFormatsOnly –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–æ–π "–°–∫–∞—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ" –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫—ç—à–µ
func (b *LocalBot) SendVideoFormatsOnly(chatID int64, text string, formats []services.VideoFormat) error {
	log.Printf("üé• –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã (%d —à—Ç—É–∫)", len(formats))
	
	// –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
	log.Printf("üîç –î–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é:")
	for i, f := range formats {
		log.Printf("  üé• %d. ID: %s, Resolution: %s, Extension: %s, HasAudio: %v, Size: %s", 
			i+1, f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
	}
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
		icon := "üé•"
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	videoURL, exists := b.getVideoURLCache(chatID)
	if exists && videoURL != "" {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º videoID –∏–∑ URL
		videoID := extractVideoID(videoURL)
		if videoID != "" {
			// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –∫—ç—à–∞
			platform := b.platformCache[chatID]
			if platform == "" {
				platform = "youtube" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é YouTube
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ
			if inCache, cachedFormats, err := b.isVideoInCache(videoID, platform); err == nil && inCache {
				log.Printf("‚ö° –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ (%d —Ñ–æ—Ä–º–∞—Ç–æ–≤), –¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", len(cachedFormats))
				
				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
				keyboard = append(keyboard, []map[string]interface{}{
					{
						"text":          "‚ö° –°–∫–∞—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (–∏–∑ –∫—ç—à–∞)",
						"callback_data": "instant_cache",
					},
				})
			} else {
				log.Printf("üîç –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: videoID=%s, platform=%s, error=%v", videoID, platform, err)
			}
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (%d –∫–Ω–æ–ø–æ–∫)", len(keyboard))
	return nil
}

// SendAllFormats –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã (–∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ) –≤ –æ–¥–Ω–æ–º –º–µ–Ω—é
func (b *LocalBot) SendAllFormats(chatID int64, text string, formats []services.VideoFormat) error {
	log.Printf("üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã (%d —à—Ç—É–∫)", len(formats))
	
	// –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
	log.Printf("üîç –î–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é:")
	for i, f := range formats {
		formatType := "üé•"
		if f.Extension == "audio" {
			formatType = "üéµ"
		}
		log.Printf("  %s %d. ID: %s, Resolution: %s, Extension: %s, HasAudio: %v, Size: %s", 
			formatType, i+1, f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
	}
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		// –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
		icon := "üé•"
		if format.Extension == "audio" {
			icon = "üéµ"
		}
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	videoURL, exists := b.getVideoURLCache(chatID)
	if exists && videoURL != "" {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º videoID –∏–∑ URL
		videoID := extractVideoID(videoURL)
		if videoID != "" {
			// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –∫—ç—à–∞
			platform := b.platformCache[chatID]
			if platform == "" {
				platform = "youtube" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é YouTube
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ
			if inCache, cachedFormats, err := b.isVideoInCache(videoID, platform); err == nil && inCache {
				log.Printf("‚ö° –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ (%d —Ñ–æ—Ä–º–∞—Ç–æ–≤), –¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", len(cachedFormats))
				
				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
				keyboard = append(keyboard, []map[string]interface{}{
					{
						"text":          "‚ö° –°–∫–∞—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (–∏–∑ –∫—ç—à–∞)",
						"callback_data": "instant_cache",
					},
				})
			} else {
				log.Printf("üîç –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: videoID=%s, platform=%s, error=%v", videoID, platform, err)
			}
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (%d –∫–Ω–æ–ø–æ–∫)", len(keyboard))
	return nil
}

// SendAudioFormatsOnly –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
func (b *LocalBot) SendAudioFormatsOnly(chatID int64, text string, formats []services.VideoFormat) error {
	log.Printf("üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã (%d —à—Ç—É–∫)", len(formats))
	
	// –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
	log.Printf("üîç –î–µ—Ç–∞–ª–∏ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é:")
	for i, f := range formats {
		log.Printf("  üéµ %d. ID: %s, Resolution: %s, Extension: %s, HasAudio: %v, Size: %s", 
			i+1, f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
	}
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–æ–∫ –¥–ª—è –∞—É–¥–∏–æ
		icon := "üéµ"
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	videoURL, exists := b.getVideoURLCache(chatID)
	if exists && videoURL != "" {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º videoID –∏–∑ URL
		videoID := extractVideoID(videoURL)
		if videoID != "" {
			// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –∫—ç—à–∞
			platform := b.platformCache[chatID]
			if platform == "" {
				platform = "youtube" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é YouTube
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ
			if inCache, cachedFormats, err := b.isVideoInCache(videoID, platform); err == nil && inCache {
				log.Printf("‚ö° –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ (%d —Ñ–æ—Ä–º–∞—Ç–æ–≤), –¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", len(cachedFormats))
				
				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
				keyboard = append(keyboard, []map[string]interface{}{
					{
						"text":          "‚ö° –°–∫–∞—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (–∏–∑ –∫—ç—à–∞)",
						"callback_data": "instant_cache",
					},
				})
			} else {
				log.Printf("üîç –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: videoID=%s, platform=%s, error=%v", videoID, platform, err)
			}
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (%d –∫–Ω–æ–ø–æ–∫)", len(keyboard))
	return nil
}

// SendInlineKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline keyboard
func (b *LocalBot) SendInlineKeyboard(chatID int64, text string, formats []services.VideoFormat, videoURL string) error {
	// –°–æ–∑–¥–∞–µ–º inline keyboard
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
		icon := "üé•"
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ" –≤ –ø–æ–¥–º–µ–Ω—é —Ñ–æ—Ä–º–∞—Ç–æ–≤
	// –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	return nil
}

// AnswerCallbackQuery –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
func (b *LocalBot) AnswerCallbackQuery(callbackID string) error {
	message := map[string]interface{}{
		"callback_query_id": callbackID,
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ callback answer: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.LocalClient.Post(
		fmt.Sprintf("%s/bot%s/answerCallbackQuery", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å callback answer: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	return nil
}

// Update –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
type Update struct {
	UpdateID int64   `json:"update_id"`
	Message  *Message `json:"message,omitempty"`
	CallbackQuery *CallbackQuery `json:"callback_query,omitempty"`
}

// CallbackQuery –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç callback –æ—Ç inline keyboard
type CallbackQuery struct {
	ID   string  `json:"id"`
	Data string  `json:"data"`
	Message *Message `json:"message"`
}

// Message –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
type Message struct {
	MessageID int64  `json:"message_id"`
	Text      string `json:"text"`
	Chat      Chat   `json:"chat"`
	From      User   `json:"from"`
}

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
type User struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name,omitempty"`
	Username  string `json:"username,omitempty"`
}

// Chat –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ Telegram
type Chat struct {
	ID int64 `json:"id"`
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.Load("config.env")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
	if cfg.TelegramToken == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.env")
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º Telegram API: %s\n", cfg.TelegramAPI)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º yt-dlp
	youtubeService := services.NewYouTubeService(cfg.DownloadDir)
	if err := youtubeService.CheckYtDlp(); err != nil {
		log.Fatalf("‚ùå %v", err)
	}
	fmt.Println("‚úÖ yt-dlp –¥–æ—Å—Ç—É–ø–µ–Ω")

	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
	universalService := services.NewUniversalService(cfg.DownloadDir)
	if err := universalService.CheckYtDlp(); err != nil {
		log.Fatalf("‚ùå %v", err)
	}
	fmt.Println("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤")

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (20 –ì–ë) - —Ä—è–¥–æ–º —Å –∫–æ—Ä–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞
	cacheService, err := services.NewCacheService("../cache", 20)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à-—Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}
	defer cacheService.Close()
	
	// –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
	bot := NewLocalBot(cfg.TelegramToken, cfg.TelegramAPI, time.Duration(cfg.HTTPTimeout)*time.Second, youtubeService, universalService, cacheService, cfg.Proxy)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Telegram API
	if err := bot.GetMe(); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Telegram API: %v", err)
	}

	fmt.Printf("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @%s (%s)\n", bot.Username, bot.FirstName)
	fmt.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: %s\n", cfg.TelegramAPI)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := youtubeService.CheckNetwork(); err != nil {
		log.Printf("‚ö†Ô∏è %v", err)
		fmt.Println("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é - –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
	} else {
		fmt.Println("‚úÖ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
	}

	fmt.Println("üé¨ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
	
	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è graceful shutdown
	gracefulShutdown := func() {
		log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
		
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ gracefully
		bot.Shutdown()
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		metrics := bot.getMetrics()
		log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:")
		log.Printf("   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d", metrics.TotalRequests)
		log.Printf("   - –£—Å–ø–µ—à–Ω—ã—Ö: %d", metrics.SuccessfulRequests)
		log.Printf("   - –û—à–∏–±–æ–∫: %d", metrics.TotalErrors)
		log.Printf("   - –°–∫–∞—á–∏–≤–∞–Ω–∏–π: %d", metrics.TotalDownloads)
		log.Printf("   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %v", metrics.AverageResponseTime)
		
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—ç—à-—Å–µ—Ä–≤–∏—Å
		if bot.cacheService != nil {
			bot.cacheService.Close()
			log.Println("üíæ –ö—ç—à-—Å–µ—Ä–≤–∏—Å –∑–∞–∫—Ä—ã—Ç")
		}
		
		log.Println("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ getUpdates
	log.Printf("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ getUpdates...")
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π offset –∏–∑ —Ñ–∞–π–ª–∞
	offset := loadLastOffset()
	lastCleanup := time.Now()
	for {
		select {
		case <-sigChan:
			gracefulShutdown()
			fmt.Printf("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...\n")
			return
		default:
			// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)
			if time.Since(lastCleanup) > 12*time.Hour {
				CleanupCache(bot)
				lastCleanup = time.Now()
			}
			
			// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			updates, err := bot.GetUpdates(int(offset), 100, 0)
			if err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
				
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 Conflict
				if strings.Contains(err.Error(), "409") {
					log.Printf("üîÑ –û—à–∏–±–∫–∞ 409 (Conflict) - —Å–±—Ä–∞—Å—ã–≤–∞—é offset")
					offset = 0
					saveLastOffset(offset)
					time.Sleep(5 * time.Second)
					continue
				}
				
				time.Sleep(5 * time.Second)
				continue
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			for _, update := range updates {
				if update.UpdateID >= offset {
					offset = update.UpdateID + 1
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º offset –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
					saveLastOffset(offset)
				}

				if update.Message != nil {
					message := update.Message
					log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s –æ—Ç —á–∞—Ç–∞ %d", 
						message.Text, message.Chat.ID)
					
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
					if bot.isRateLimited(message.Chat.ID) {
						bot.SendMessage(message.Chat.ID, "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥.")
						continue
					}
					
					// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rate limit
					bot.setRateLimit(message.Chat.ID)
					bot.setLastRequestTime(message.Chat.ID, time.Now())
					
					// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
					bot.updateMetrics(1, 0, 0, 0, 0, 0)
					
					// –î–æ–±–∞–≤–ª—è–µ–º recovery –æ—Ç panic
					defer func() {
						if r := recover(); r != nil {
							log.Printf("üö® PANIC RECOVERED: %v", r)
							bot.SendMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
						}
					}()
					
					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
					if message.Text == "/start" {
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
						bot.SendWelcomeMessageWithImages(message.Chat.ID)
					} else if message.Text == "/help" {
						platforms := bot.universalService.GetSupportedPlatforms()
						platformList := ""
						for _, platform := range platforms {
							platformList += fmt.Sprintf("‚Ä¢ %s %s\n", platform.Icon, platform.DisplayName)
						}
						
						helpText := fmt.Sprintf(`üé¨ ChillYouTube Bot - –°–ø—Ä–∞–≤–∫–∞

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
/version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
/history - –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π

üîí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
%s
üîó –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞ (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ)
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏

‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ YouTube –∏ YouTube Shorts
‚Ä¢ –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –†–æ—Å—Å–∏–∏
‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ

üéØ –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:
‚Ä¢ https://www.youtube.com/watch?v=VIDEO_ID
‚Ä¢ https://youtu.be/VIDEO_ID
‚Ä¢ https://www.youtube.com/shorts/VIDEO_ID`, platformList)
						bot.SendMessage(message.Chat.ID, helpText)
					} else if message.Text == "/status" {
						// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
						health := HealthCheck(youtubeService, cacheService)
						
						statusText := fmt.Sprintf(`ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
üé¨ YouTube —Å–µ—Ä–≤–∏—Å: %s
üåê –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: %s
üíæ –ö—ç—à-—Å–µ—Ä–≤–∏—Å: %s
üì± Telegram API: %s
üõ†Ô∏è yt-dlp: %s

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: %d
üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö URL: %d
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–æ—Å—Ç–æ—è–Ω–Ω–æ

üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –¢–æ–ª—å–∫–æ —á—Ç–æ

üí° –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help`,
							health["youtube"], health["network"], health["cache"], 
							health["telegram"], health["yt-dlp"],
							len(bot.formatCache), len(bot.videoURLCache))
						bot.SendMessage(message.Chat.ID, statusText)
					} else if message.Text == "/stats" {
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
						if !bot.IsAdmin(message.From.ID) {
							bot.SendMessage(message.Chat.ID, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\nüîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
							continue
						}
						
						metrics := bot.GetMetrics()
						uptime := bot.GetUptime()
						
						statsText := fmt.Sprintf(`üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %s
üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: %d
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: %d
üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π: %d
‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %v

üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: %d
üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL: %d
üé¨ –°–µ—Ä–≤–∏—Å YouTube: –ê–∫—Ç–∏–≤–µ–Ω
üíæ –ö—ç—à-—Å–µ—Ä–≤–∏—Å: –ê–∫—Ç–∏–≤–µ–Ω

üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %.1f%%
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %s

üë§ –ó–∞–ø—Ä–æ—Å–∏–ª: %s (ID: %d)

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help`, 
							formatDuration(uptime),
							metrics.TotalRequests,
							metrics.SuccessfulRequests,
							metrics.FailedRequests,
							metrics.TotalDownloads,
							metrics.AverageResponseTime,
							len(bot.formatCache), 
							len(bot.videoURLCache),
							float64(metrics.SuccessfulRequests)/float64(metrics.TotalRequests)*100,
							formatTime(metrics.LastActivity),
							message.From.FirstName,
							message.From.ID)
						bot.SendMessage(message.Chat.ID, statsText)
					} else if message.Text == "/info" {
						platforms := bot.universalService.GetSupportedPlatforms()
						platformList := ""
						for _, platform := range platforms {
							platformList += fmt.Sprintf("‚Ä¢ %s %s\n", platform.Icon, platform.DisplayName)
						}
						
						infoText := fmt.Sprintf(`‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üé¨ ChillYouTube Bot v4.0
üìÖ –í–µ—Ä—Å–∏—è: 2024.12.19
üîß –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω

üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
%s
üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube –∏ YouTube Shorts
‚Ä¢ –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ
‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ —Å–±–æ—è—Ö
‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ Retry –º–µ—Ö–∞–Ω–∏–∑–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è YouTube
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
‚Ä¢ Graceful shutdown
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

üí° –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ`, platformList)
						bot.SendMessage(message.Chat.ID, infoText)
					} else if message.Text == "/ping" {
						startTime := time.Now()
						responseTime := time.Since(startTime)
						
						pingText := fmt.Sprintf(`üèì Pong! 

‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %v
üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: %s
üìä –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üí° –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`, 
							responseTime, 
							time.Now().Format("15:04:05"))
						bot.SendMessage(message.Chat.ID, pingText)
					} else if message.Text == "/history" {
						// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
						historyText := `üìã –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π

üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π:
‚Ä¢ –í–∏–¥–µ–æ 1: YouTube - 1280x720 (2 –º–∏–Ω –Ω–∞–∑–∞–¥)
‚Ä¢ –í–∏–¥–µ–æ 2: YouTube Shorts - 720x1280 (5 –º–∏–Ω –Ω–∞–∑–∞–¥)
‚Ä¢ –í–∏–¥–µ–æ 3: YouTube - 1920x1080 (10 –º–∏–Ω –Ω–∞–∑–∞–¥)

üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats
üìä –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: 156

üîÑ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`
						bot.SendMessage(message.Chat.ID, historyText)
					} else if message.Text == "/version" {
						versionText := `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏

üé¨ ChillYouTube Bot
üìÖ –í–µ—Ä—Å–∏—è: 4.0.0
üîß –°–±–æ—Ä–∫–∞: 2024.12.19
üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Go 1.25.0

üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v4.0:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ YouTube –∏ YouTube Shorts
‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫—ç—à-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è YouTube
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è YouTube
‚Ä¢ Retry –º–µ—Ö–∞–Ω–∏–∑–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ Graceful shutdown
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã /ping, /version, /info

‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:
‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è YouTube
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help`
						bot.SendMessage(message.Chat.ID, versionText)
					} else if len(message.Text) > 10 && bot.universalService.IsValidURL(message.Text) {
						// –í–∏–¥–µ–æ —Å—Å—ã–ª–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
						log.Printf("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ —Å—Å—ã–ª–∫—É: %s", message.Text)
						
						// –í–∞–ª–∏–¥–∞—Ü–∏—è URL –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
						if !bot.validateURL(message.Text) {
							bot.SendMessage(message.Chat.ID, "‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ YouTube —Å—Å—ã–ª–∫–∏.")
							continue
						}
						
						// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
						platformInfo := bot.universalService.GetPlatformInfo(message.Text)
						log.Printf("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platformInfo.Icon, platformInfo.DisplayName)
						
						// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
						if !platformInfo.Supported {
							bot.SendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\nüí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\nüé¨ YouTube\nüé¨ YouTube Shorts")
							continue
						}
						
						// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤—ã—à–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
						
						// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ worker pool
						go func(url string, chatID int64, platform services.PlatformInfo) {
							// –ü–æ–ª—É—á–∞–µ–º worker –∏–∑ pool
							bot.acquireWorker()
							defer bot.releaseWorker()
							
							startTime := time.Now()
							
							// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ thread-safe
							bot.clearCacheForChat(chatID)
							log.Printf("üóëÔ∏è –û—á–∏—Å—Ç–∏–ª —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è —á–∞—Ç–∞ %d", chatID)
							
							// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
							// if err := bot.ClearChatHistory(chatID); err != nil {
							// 	log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞: %v", err)
							// }
							
							log.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –¥–ª—è: %s", url)
							bot.SendMessage(chatID, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ... ‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ.")
							
							// –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–≤—å—é
							log.Printf("üîç –û–¢–õ–ê–î–ö–ê: platform.Type = %s", platform.Type)
							log.Printf("üîç –û–¢–õ–ê–î–ö–ê: PlatformYouTube = %s", services.PlatformYouTube)
							log.Printf("üîç –û–¢–õ–ê–î–ö–ê: PlatformYouTubeShorts = %s", services.PlatformYouTubeShorts)
							
							var metadata *services.VideoMetadata
							if platform.Type == services.PlatformYouTube || platform.Type == services.PlatformYouTubeShorts {
								log.Printf("üîç –ü–æ–ª—É—á–∞—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è YouTube –≤–∏–¥–µ–æ...")
								log.Printf("üîç URL –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %s", url)
								log.Printf("üîç ChatID –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %d", chatID)
								
								metadata, err := bot.youtubeService.GetVideoMetadata(url)
								if err != nil {
									log.Printf("‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %v", err)
									log.Printf("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: %+v", err)
									// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
								} else {
									log.Printf("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
									log.Printf("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: %s", metadata.Title)
									log.Printf("‚úÖ –ê–≤—Ç–æ—Ä: %s", metadata.Author)
									log.Printf("‚úÖ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞: %s", metadata.Thumbnail)
									log.Printf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–≤—å—é...")
									
									// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
									if err := bot.SendVideoPreview(chatID, metadata); err != nil {
										log.Printf("‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–≤—å—é: %v", err)
										log.Printf("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: %+v", err)
									} else {
										log.Printf("‚úÖ –ü—Ä–µ–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
									}
								}
							} else {
								log.Printf("‚ö†Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", platform.Type)
							}
							
							// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤
							log.Printf("üìã –í—ã–∑—ã–≤–∞—é GetVideoFormats –¥–ª—è %s...", platform.DisplayName)
							// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —á–µ—Ä–µ–∑ youtubeService –¥–ª—è YouTube
							var formats []services.VideoFormat
							var err error
							
							if platform.Type == services.PlatformYouTube || platform.Type == services.PlatformYouTubeShorts {
								formats, err = bot.youtubeService.GetVideoFormats(url)
							} else {
								formats, err = bot.universalService.GetVideoFormats(url)
							}
							if err != nil {
								log.Printf("‚ùå –û—à–∏–±–∫–∞ GetVideoFormats: %v", err)
								
								// –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
								var userMessage string
								switch {
								case strings.Contains(err.Error(), "not made this video available in your country"):
									userMessage = fmt.Sprintf("‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n‚Ä¢ VPN —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–æ–π\n‚Ä¢ –í–∏–¥–µ–æ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤ –†–æ—Å—Å–∏–∏\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platform.Icon, platform.DisplayName)
								case strings.Contains(err.Error(), "Video unavailable"):
									userMessage = fmt.Sprintf("‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ\n‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ\n‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platform.Icon, platform.DisplayName)
								case strings.Contains(err.Error(), "timeout") || strings.Contains(err.Error(), "—Ç–∞–π–º–∞—É—Ç"):
									userMessage = fmt.Sprintf("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n‚Ä¢ –î—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platform.Icon, platform.DisplayName)
								case strings.Contains(err.Error(), "SSL") || strings.Contains(err.Error(), "handshake"):
									userMessage = fmt.Sprintf("üîí –ü—Ä–æ–±–ª–µ–º—ã —Å SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN\n‚Ä¢ –î—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platform.Icon, platform.DisplayName)
								case strings.Contains(err.Error(), "Sign in to confirm your age"):
									userMessage = fmt.Sprintf("üîû –í–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platform.Icon, platform.DisplayName)
								case strings.Contains(err.Error(), "Private video"):
									userMessage = fmt.Sprintf("üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platform.Icon, platform.DisplayName)
								case strings.Contains(err.Error(), "Live stream"):
									userMessage = fmt.Sprintf("üì∫ –ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platform.Icon, platform.DisplayName)
								case strings.Contains(err.Error(), "No video formats found"):
									userMessage = fmt.Sprintf("üìπ –§–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É\n‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", platform.Icon, platform.DisplayName)
								default:
									userMessage = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ\n\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n%s\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É\n‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s %s", err.Error(), platform.Icon, platform.DisplayName)
								}
								
								bot.SendMessage(chatID, userMessage)
								return
							}
							
							log.Printf("üìä –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: %d", len(formats))
							
							// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
							if metadata != nil {
								bot.SendMessage(chatID, "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.")
							} else {
								bot.SendMessage(chatID, "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.")
							}
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
							cachedURL, exists := bot.getVideoURLCache(chatID)
							if exists && cachedURL != "" && cachedURL != url {
								log.Printf("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: URL –≤ –∫—ç—à–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É!")
								log.Printf("  –ö—ç—à: %s", cachedURL)
								log.Printf("  –¢–µ–∫—É—â–∏–π: %s", url)
								// –û—á–∏—â–∞–µ–º –∫—ç—à –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π URL
								bot.clearCacheForChat(chatID)
								log.Printf("üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏–ª –∫—ç—à –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è URL")
							}
							
							// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö
							log.Printf("üîç –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:")
							for i, f := range formats {
								log.Printf("  %d. ID: %s, Extension: %s, Resolution: %s, HasAudio: %v, Size: %s", 
									i+1, f.ID, f.Extension, f.Resolution, f.HasAudio, f.FileSize)
							}
							
							if len(formats) == 0 {
								log.Printf("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
								bot.SendMessage(chatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
								return
							}
							
							// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã, URL –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ –∫—ç—à–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ thread-safe
							bot.setFormatCache(chatID, formats)
							bot.setVideoURLCache(chatID, url)
							bot.setPlatformCache(chatID, string(platform.Type))
							log.Printf("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª –≤ –∫—ç—à: %d —Ñ–æ—Ä–º–∞—Ç–æ–≤, URL: %s, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s –¥–ª—è —á–∞—Ç–∞ %d", len(formats), url, platform.Type, chatID)
							
							// –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ
							var audioFormats []services.VideoFormat
							var videoFormats []services.VideoFormat
							
							log.Printf("üîç –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ %d —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ", len(formats))
							
							// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
							resolutionGroups := make(map[string][]services.VideoFormat)
							
							for _, format := range formats {
								log.Printf("üîç –†–∞–∑–¥–µ–ª—è—é —Ñ–æ—Ä–º–∞—Ç: %s %s %s (—Ç–∏–ø: %s, –∞—É–¥–∏–æ: %v)", 
									format.ID, format.Resolution, format.Extension, format.Extension, format.HasAudio)
								if format.Extension == "audio" {
									audioFormats = append(audioFormats, format)
									log.Printf("üéµ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—É–¥–∏–æ: %s", format.ID)
								} else {
									// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
									resolutionGroups[format.Resolution] = append(resolutionGroups[format.Resolution], format)
								}
							}
							
							// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ–º –õ–£–ß–®–ò–ô —Ñ–æ—Ä–º–∞—Ç
							for resolution, formats := range resolutionGroups {
								if len(formats) == 0 {
									continue
								}
								
								// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
								sort.Slice(formats, func(i, j int) bool {
									sizeI := parseFileSize(formats[i].FileSize)
									sizeJ := parseFileSize(formats[j].FileSize)
									return sizeI < sizeJ
								})
								
								// –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
								var bestFormat *services.VideoFormat
								
								// –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ
								for _, f := range formats {
									if f.HasAudio {
										bestFormat = &f
										log.Printf("üéµ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ –¥–ª—è %s: %s (%s)", 
											resolution, f.ID, f.FileSize)
										break
									}
								}
								
								// –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å –∞—É–¥–∏–æ, –±–µ—Ä–µ–º —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π
								if bestFormat == nil {
									bestFormat = &formats[0]
									log.Printf("üìπ –ù–µ—Ç –∞—É–¥–∏–æ –¥–ª—è %s, –±–µ—Ä—É —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π: %s (%s)", 
										resolution, bestFormat.ID, bestFormat.FileSize)
								}
								
								// –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç
								videoFormats = append(videoFormats, *bestFormat)
								log.Printf("üé• –î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ–æ: %s (%s) - %s (–∞—É–¥–∏–æ: %v)", 
									bestFormat.ID, bestFormat.Resolution, bestFormat.FileSize, bestFormat.HasAudio)
							}
							
							log.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d –∞—É–¥–∏–æ –∏ %d –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤", len(audioFormats), len(videoFormats))
							
							// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
							if len(videoFormats) <= 1 {
								log.Printf("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—è—é –¥–µ—Ç–∞–ª–∏:")
								for i, f := range videoFormats {
									log.Printf("  üé• %d. ID: %s, Resolution: %s, Extension: %s, HasAudio: %v, Size: %s", 
										i+1, f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
								}
							}
							
							// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ –∑–≤—É–∫–æ–º
							videoWithAudio := 0
							for _, f := range videoFormats {
								if f.HasAudio {
									videoWithAudio++
								}
							}
							log.Printf("üéµ –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ –∑–≤—É–∫–æ–º: %d –∏–∑ %d", videoWithAudio, len(videoFormats))
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã —Å –∞—É–¥–∏–æ
							if len(videoFormats) == 0 {
								log.Printf("‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ!")
								bot.SendMessage(message.Chat.ID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")
								return
							}
							
							// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
							sortVideoFormatsByResolution(videoFormats)
							
							// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
							if len(audioFormats) == 0 {
								log.Printf("‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
								for i, f := range formats {
									log.Printf("  %d. ID: %s, Extension: '%s', Resolution: %s, HasAudio: %v", 
										i+1, f.ID, f.Extension, f.Resolution, f.HasAudio)
								}
							}
							
							// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
							var allFormats []services.VideoFormat
							
							// –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã
							for _, format := range audioFormats {
								allFormats = append(allFormats, format)
							}
							
							// –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
							for _, format := range videoFormats {
								allFormats = append(allFormats, format)
							}
							
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ä–∞–∑—É
							if err := bot.SendAllFormats(message.Chat.ID, "üé¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:", allFormats); err != nil {
								log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤: %v", err)
								bot.SendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Ñ–æ—Ä–º–∞—Ç–æ–≤")
								// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—à–∏–±–∫–∏
								duration := time.Since(startTime)
								bot.UpdateMetrics("get_formats", false, duration)
							} else {
								// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —É—Å–ø–µ—Ö–∞
								duration := time.Since(startTime)
								bot.UpdateMetrics("get_formats", true, duration)
							}
							
							// –ù–ï —Å–∫–∞—á–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∂–¥–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
							log.Printf("‚è∏Ô∏è –û–∂–∏–¥–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
						}(message.Text, message.Chat.ID, *platformInfo)
					} else if message.Text == "best" || message.Text == "1" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç - —Å–∫–∞—á–∏–≤–∞–µ–º
						log.Printf("üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç: %s", message.Text)
						
						bot.SendMessage(message.Chat.ID, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ...")
						
						// TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å URL –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
						// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
						bot.SendMessage(message.Chat.ID, "üöß –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ —Å–∫–∞—á–∏–≤–∞—é –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.")
					} else {
						bot.SendMessage(message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
					}
				} else if update.CallbackQuery != nil {
					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç inline keyboard
					callback := update.CallbackQuery
					log.Printf("üéØ –ü–æ–ª—É—á–µ–Ω callback: %s", callback.Data)
					
					if callback.Data == "type_audio" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã
						log.Printf("üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã")
						bot.AnswerCallbackQuery(callback.ID)
						
						// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
						formats, exists := bot.getFormatCache(callback.Message.Chat.ID)
						if !exists {
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –§–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
							continue
						}
						var audioFormats []services.VideoFormat
						for _, format := range formats {
							if format.Extension == "audio" {
								audioFormats = append(audioFormats, format)
							}
						}
						
						log.Printf("üéµ –ù–∞–π–¥–µ–Ω–æ %d –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞", len(audioFormats))
						
						if len(audioFormats) > 0 {
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
							bot.SendAudioFormatsOnly(callback.Message.Chat.ID, "üéµ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã:", audioFormats)
						} else {
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
						}
						
					} else if callback.Data == "type_video" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
						log.Printf("üé• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã")
						bot.AnswerCallbackQuery(callback.ID)
						
						// –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –∫—ç—à–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
						formats, exists := bot.getFormatCache(callback.Message.Chat.ID)
						if !exists {
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –§–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
							continue
						}
						log.Printf("üîç –ü—Ä–∏–º–µ–Ω—è—é —É–º–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –¥–ª—è %d —Ñ–æ—Ä–º–∞—Ç–æ–≤", len(formats))
						
						// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
						resolutionGroups := make(map[string][]services.VideoFormat)
						
						for _, format := range formats {
							if format.Extension != "audio" {
								// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
								resolutionGroups[format.Resolution] = append(resolutionGroups[format.Resolution], format)
							}
						}
						
						// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ–º –õ–£–ß–®–ò–ô —Ñ–æ—Ä–º–∞—Ç
						var videoFormats []services.VideoFormat
						for resolution, formatList := range resolutionGroups {
							if len(formatList) == 0 {
								continue
							}
							
							// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
							sort.Slice(formatList, func(i, j int) bool {
								sizeI := parseFileSize(formatList[i].FileSize)
								sizeJ := parseFileSize(formatList[j].FileSize)
								return sizeI < sizeJ
							})
							
							// –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
							var bestFormat *services.VideoFormat
							
							// –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ
							for _, f := range formatList {
								if f.HasAudio {
									bestFormat = &f
									log.Printf("üéµ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ –¥–ª—è %s: %s (%s)", 
										resolution, f.ID, f.FileSize)
									break
								}
							}
							
							// –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å –∞—É–¥–∏–æ, –±–µ—Ä–µ–º —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π
							if bestFormat == nil {
								bestFormat = &formatList[0]
								log.Printf("üìπ –ù–µ—Ç –∞—É–¥–∏–æ –¥–ª—è %s, –±–µ—Ä—É —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π: %s (%s)", 
									resolution, bestFormat.ID, bestFormat.FileSize)
							}
							
							// –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç
							videoFormats = append(videoFormats, *bestFormat)
							log.Printf("üé• –î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ–æ: %s (%s) - %s (–∞—É–¥–∏–æ: %v)", 
								bestFormat.ID, bestFormat.Resolution, bestFormat.FileSize, bestFormat.HasAudio)
						}
						
						// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
						sortVideoFormatsByResolution(videoFormats)
						
						if len(videoFormats) > 0 {
							log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ", len(videoFormats))
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
							bot.SendVideoFormatsOnly(callback.Message.Chat.ID, "üé• –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã:", videoFormats)
						} else {
							log.Printf("‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ!")
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")
						}
						
					} else if strings.HasPrefix(callback.Data, "format_") {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç
						parts := strings.Split(callback.Data, "_")
						if len(parts) >= 2 {
							formatID := parts[1]
							log.Printf("üìπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç: %s", formatID)
							bot.AnswerCallbackQuery(callback.ID)
							bot.SendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s...", formatID))
							
							// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ —Å download pool
							go func() {
								// –ü–æ–ª—É—á–∞–µ–º download slot
								bot.acquireDownload()
								defer bot.releaseDownload()
								
								startTime := time.Now()
								log.Printf("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", formatID)
								
								// –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
							videoURL, exists := bot.getVideoURLCache(callback.Message.Chat.ID)
							if !exists || videoURL == "" {
								log.Printf("‚ùå URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –¥–ª—è —á–∞—Ç–∞ %d", callback.Message.Chat.ID)
								bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
								return
							}
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
							if !strings.Contains(videoURL, "youtube.com") && !strings.Contains(videoURL, "youtu.be") {
								log.Printf("‚ùå URL –≤ –∫—ç—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: %s", videoURL)
								bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∫—ç—à–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
								return
							}
							
							// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL –∞–∫—Ç—É–∞–ª–µ–Ω
							log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å URL –≤ –∫—ç—à–µ:")
							log.Printf("  –ö—ç—à: %s", videoURL)
							log.Printf("  –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å: %s", callback.Message.Text)
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
							// –ï—Å–ª–∏ URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç - –æ—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ
							if !strings.Contains(videoURL, "youtube.com") && !strings.Contains(videoURL, "youtu.be") {
								log.Printf("‚ùå URL –≤ –∫—ç—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: %s", videoURL)
								bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∫—ç—à–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
								return
							}
							
							log.Printf("üîó –ò—Å–ø–æ–ª—å–∑—É—é URL –∏–∑ –∫—ç—à–∞: %s", videoURL)
								
								if videoURL != "" {
									// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –∫—ç—à–∞
									platform := bot.platformCache[callback.Message.Chat.ID]
									if platform == "" {
										platform = "youtube" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é YouTube
									}
									
									// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º Video ID
									platformInfo := bot.universalService.GetPlatformInfo(videoURL)
									videoID := platformInfo.VideoID
									if videoID == "" {
										log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Video ID –∏–∑ URL: %s", videoURL)
										bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
										return
									}
									
									log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—ç—à –¥–ª—è videoID: %s, platform: %s, formatID: %s", videoID, platform, formatID)
									
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
									if isCached, cachedVideo, err := bot.cacheService.IsVideoCached(videoID, platform, formatID); err != nil {
										log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: %v", err)
									} else if isCached {
										// –§–∞–π–ª –≤ –∫—ç—à–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
										log.Printf("‚ö° –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: %s (—Ñ–æ—Ä–º–∞—Ç: %s)", videoID, formatID)
										
										// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
										fileExt := strings.ToLower(filepath.Ext(cachedVideo.FilePath))
										isAudio := fileExt == ".mp3" || fileExt == ".m4a" || fileExt == ".ogg"
										
										if isAudio {
											bot.SendMessage(callback.Message.Chat.ID, "‚ö° –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ –∏–∑ –∫—ç—à–∞...")
											// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∏–∑ –∫—ç—à–∞
											if err := bot.SendAudio(callback.Message.Chat.ID, cachedVideo.FilePath, fmt.Sprintf("–ê—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s (–∏–∑ –∫—ç—à–∞)", formatID)); err != nil {
												log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –∏–∑ –∫—ç—à–∞: %v", err)
												bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –∏–∑ –∫—ç—à–∞")
												return
											}
											log.Printf("‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: %s", formatID)
										} else {
											bot.SendMessage(callback.Message.Chat.ID, "‚ö° –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞...")
											// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
											if err := bot.SendVideo(callback.Message.Chat.ID, cachedVideo.FilePath, fmt.Sprintf("–í–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s (–∏–∑ –∫—ç—à–∞)", formatID)); err != nil {
												log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞: %v", err)
												bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞")
												return
											}
											log.Printf("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: %s", formatID)
										}
										
										// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
										bot.cacheService.IncrementDownloadCount(videoID, string(platformInfo.Type), formatID)
										
										bot.SendMessage(callback.Message.Chat.ID, "‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞!")
										return
									}
									
									// –í–∏–¥–µ–æ –Ω–µ –≤ –∫—ç—à–µ - —Å–∫–∞—á–∏–≤–∞–µ–º
									log.Printf("üì• –í–∏–¥–µ–æ –Ω–µ –≤ –∫—ç—à–µ, —Å–∫–∞—á–∏–≤–∞—é: %s", videoURL)
									bot.SendMessage(callback.Message.Chat.ID, "üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª... ‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–æ 5 –º–∏–Ω—É—Ç")
									
							// –†–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
							var videoPath string
							var err error
							
							if platform == "youtube" || platform == "youtube_shorts" {
								videoPath, err = bot.youtubeService.DownloadVideoWithFormat(videoURL, formatID)
							} else {
								videoPath, err = bot.universalService.DownloadVideoWithFormat(videoURL, formatID)
							}
									if err != nil {
										log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: %v", err)
										
										// –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏
										var userMessage string
										if strings.Contains(err.Error(), "timeout") {
											userMessage = "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
										} else if strings.Contains(err.Error(), "file too large") {
											userMessage = "üìè –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ú–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n‚Ä¢ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç\n‚Ä¢ –î—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ"
										} else if strings.Contains(err.Error(), "network") {
											userMessage = "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n‚Ä¢ –î—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ"
										} else {
											userMessage = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ\n\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
										}
										
										bot.SendMessage(callback.Message.Chat.ID, userMessage)
										return
									}
									
									log.Printf("üì• –§–∞–π–ª —Å–∫–∞—á–∞–Ω: %s", videoPath)
									bot.SendMessage(callback.Message.Chat.ID, "‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω! üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")
									
									// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
									fileExt := strings.ToLower(filepath.Ext(videoPath))
									
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ
									var isAudioFormat bool
									if cachedFormats, exists := bot.getFormatCache(callback.Message.Chat.ID); exists {
										for _, format := range cachedFormats {
											if format.ID == formatID {
												// –§–æ—Ä–º–∞—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞—É–¥–∏–æ –µ—Å–ª–∏:
												// 1. –í ID –µ—Å—Ç—å "audio", "drc", "bestaudio"
												// 2. –ò–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ –≤–∏–¥–µ–æ)
												isAudioFormat = strings.Contains(formatID, "audio") || 
																strings.Contains(formatID, "drc") || 
																strings.Contains(formatID, "bestaudio") ||
																format.Extension == "audio"
												break
											}
										}
									}
									
									// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞
									isAudio := isAudioFormat || fileExt == ".mp3" || fileExt == ".m4a" || fileExt == ".ogg"
									
									// –ï—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ –∏ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –¥–≤–æ–π–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (.mp4.mp3), –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ
									if isAudio && strings.Contains(videoPath, ".mp4.mp3") {
										correctPath := strings.Replace(videoPath, ".mp4.mp3", ".mp3", 1)
										if err := os.Rename(videoPath, correctPath); err != nil {
											log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª: %v", err)
										} else {
											videoPath = correctPath
											fileExt = ".mp3"
											log.Printf("‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: %s -> %s", videoPath, correctPath)
										}
									}
									
									// –ï—Å–ª–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ webm, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
									if fileExt == ".webm" {
										if isAudio {
											// –î–ª—è –∞—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WebM –≤ MP3
											log.Printf("üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é WebM –∞—É–¥–∏–æ –≤ MP3: %s", videoPath)
											convertedPath, err := bot.convertWebmToMp3(videoPath)
											if err != nil {
												log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebM –∞—É–¥–∏–æ: %v", err)
												bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
												return
											}
											videoPath = convertedPath
											fileExt = ".mp3"
											log.Printf("‚úÖ WebM –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ MP3: %s", videoPath)
										} else {
											// –î–ª—è –≤–∏–¥–µ–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WebM –≤ MP4
											log.Printf("üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é WebM –≤–∏–¥–µ–æ –≤ MP4: %s", videoPath)
											convertedPath, err := bot.convertWebmToMp4(videoPath)
											if err != nil {
												log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebM –≤–∏–¥–µ–æ: %v", err)
												bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞")
												return
											}
											videoPath = convertedPath
											fileExt = ".mp4"
											log.Printf("‚úÖ WebM –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ MP4: %s", videoPath)
										}
									}
									
									// –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ caption
									var metadata *services.VideoMetadata
									if platform == "youtube" || platform == "youtube_shorts" {
										metadata, err = bot.youtubeService.GetVideoMetadata(videoURL)
										if err != nil {
											log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è caption: %v", err)
										}
									}
									
									// –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π caption
									var caption string
									if metadata != nil {
										// –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑ –∫—ç—à–∞
										var resolution string
										if cachedFormats, exists := bot.getFormatCache(callback.Message.Chat.ID); exists {
											for _, format := range cachedFormats {
												if format.ID == formatID {
													resolution = format.Resolution
													break
												}
											}
										}
										
										caption = bot.createVideoCaption(metadata, formatID, resolution)
									} else {
										// Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
										if isAudio {
											caption = fmt.Sprintf("–ê—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", formatID)
										} else {
											caption = fmt.Sprintf("–í–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", formatID)
										}
									}
									
									// –°–ù–ê–ß–ê–õ–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –∫—ç—à (–ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π)
									// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
									fileInfo, err := os.Stat(videoPath)
									if err != nil {
										log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: %v", err)
									} else {
										// –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
										formats, exists := bot.getFormatCache(callback.Message.Chat.ID)
										var resolution string
										if exists {
											for _, f := range formats {
												if f.ID == formatID {
													resolution = f.Resolution
													break
												}
											}
										}
										
										// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
										var contentType string
										if isAudio {
											contentType = "Audio"
										} else {
											contentType = "Video"
										}
										
										// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
										title := bot.universalService.GetPlatformInfo(videoURL).DisplayName + " " + contentType
										if err := bot.cacheService.AddToCache(videoID, platform, videoURL, title, formatID, resolution, videoPath, fileInfo.Size()); err != nil {
											log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫—ç—à: %v", err)
										} else {
											log.Printf("üíæ %s –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—ç—à: %s (%s)", contentType, videoID, formatID)
										}
									}
									
									// –ü–û–¢–û–ú –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
									if isAudio {
										// –î–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º SendAudio
										if err := bot.SendAudio(callback.Message.Chat.ID, videoPath, caption); err != nil {
											log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %v", err)
											bot.SendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err))
											// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
											os.Remove(videoPath)
											return
										}
										
										log.Printf("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", formatID)
										// –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª - –æ–Ω –≤ –∫—ç—à–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
										log.Printf("üíæ –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à–µ: %s", videoPath)
									} else {
										// –î–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
										if err := bot.SendVideo(callback.Message.Chat.ID, videoPath, caption); err != nil {
											log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: %v", err)
											bot.SendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err))
											// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
											os.Remove(videoPath)
											return
										}
										
										log.Printf("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", formatID)
										// –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª - –æ–Ω –≤ –∫—ç—à–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
										log.Printf("üíæ –í–∏–¥–µ–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à–µ: %s", videoPath)
									}
								} else {
									log.Printf("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω URL –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ %s", formatID)
									bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
								}
								
								// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
								duration := time.Since(startTime)
								bot.UpdateMetrics("download", true, duration)
							}()
						}
					} else if callback.Data == "instant_cache" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ –∫—ç—à–∞
						log.Printf("‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ –∫—ç—à–∞")
						bot.AnswerCallbackQuery(callback.ID)
						
						// –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
						videoURL, exists := bot.getVideoURLCache(callback.Message.Chat.ID)
						if !exists || videoURL == "" {
							log.Printf("‚ùå URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –¥–ª—è —á–∞—Ç–∞ %d", callback.Message.Chat.ID)
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
							return
						}
						
						// –ò–∑–≤–ª–µ–∫–∞–µ–º videoID –∏–∑ URL
						videoID := extractVideoID(videoURL)
						if videoID == "" {
							log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å videoID –∏–∑ URL: %s", videoURL)
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ.")
							return
						}
						
						// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –∫—ç—à–∞
						platform := bot.platformCache[callback.Message.Chat.ID]
						if platform == "" {
							platform = "youtube" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é YouTube
						}
						
						// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –∫—ç—à–∞
						inCache, cachedFormats, err := bot.isVideoInCache(videoID, platform)
						if err != nil {
							log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: %v", err)
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞.")
							return
						}
						
						if !inCache || len(cachedFormats) == 0 {
							log.Printf("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: %s", videoID)
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
							return
						}
						
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –∫—ç—à–∞
						bot.SendMessage(callback.Message.Chat.ID, "‚ö° –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞...")
						
						for _, cachedVideo := range cachedFormats {
							// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
							fileExt := strings.ToLower(filepath.Ext(cachedVideo.FilePath))
							isAudio := fileExt == ".mp3" || fileExt == ".m4a" || fileExt == ".ogg"
							
							if isAudio {
								// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
								if err := bot.SendAudio(callback.Message.Chat.ID, cachedVideo.FilePath, fmt.Sprintf("–ê—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s (–∏–∑ –∫—ç—à–∞)", cachedVideo.FormatID)); err != nil {
									log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –∏–∑ –∫—ç—à–∞: %v", err)
								} else {
									log.Printf("‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: %s", cachedVideo.FormatID)
								}
							} else {
								// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
								if err := bot.SendVideo(callback.Message.Chat.ID, cachedVideo.FilePath, fmt.Sprintf("–í–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s (–∏–∑ –∫—ç—à–∞)", cachedVideo.FormatID)); err != nil {
									log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞: %v", err)
								} else {
									log.Printf("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: %s", cachedVideo.FormatID)
								}
							}
							
							// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
							bot.cacheService.IncrementDownloadCount(videoID, platform, cachedVideo.FormatID)
						}
						
						bot.SendMessage(callback.Message.Chat.ID, "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–∑ –∫—ç—à–∞!")
						
					} else if callback.Data == "instant_best" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
						log.Printf("‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
						bot.AnswerCallbackQuery(callback.ID)
						bot.SendMessage(callback.Message.Chat.ID, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ...")
						
						// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
						go func() {
							log.Printf("üöÄ –ù–∞—á–∏–Ω–∞—é –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ")
							bot.SendMessage(callback.Message.Chat.ID, "üîÑ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞...")
							
							// TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
							// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
							log.Printf("üì• –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
						}()
					}
				}
			}

			// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
			time.Sleep(1 * time.Second)
		}
	}
}

// parseFileSize –ø–∞—Ä—Å–∏—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç—ã
func parseFileSize(fileSize string) int64 {
	if fileSize == "" {
		return 0
	}
	
	// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
	fileSize = strings.TrimSpace(fileSize)
	
	// –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
	var multiplier float64 = 1
	var sizeStr string
	
	if strings.HasSuffix(fileSize, "GiB") {
		multiplier = 1024 * 1024 * 1024
		sizeStr = strings.TrimSuffix(fileSize, "GiB")
	} else if strings.HasSuffix(fileSize, "MiB") {
		multiplier = 1024 * 1024
		sizeStr = strings.TrimSuffix(fileSize, "MiB")
	} else if strings.HasSuffix(fileSize, "KiB") {
		multiplier = 1024
		sizeStr = strings.TrimSuffix(fileSize, "KiB")
	} else if strings.HasSuffix(fileSize, "B") {
		multiplier = 1
		sizeStr = strings.TrimSuffix(fileSize, "B")
	} else {
		// –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
		if size, err := strconv.ParseFloat(fileSize, 64); err == nil {
			return int64(size)
		}
		return 0
	}
	
	if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
		return int64(size * multiplier)
	}
	
	return 0
}

// sortVideoFormatsByResolution —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
func sortVideoFormatsByResolution(formats []services.VideoFormat) {
	sort.Slice(formats, func(i, j int) bool {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
		resI := extractResolutionNumber(formats[i].Resolution)
		resJ := extractResolutionNumber(formats[j].Resolution)
		return resI < resJ
	})
}

// extractVideoID –∏–∑–≤–ª–µ–∫–∞–µ—Ç YouTube Video ID –∏–∑ URL
func extractVideoID(url string) string {
	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
	// https://www.youtube.com/watch?v=VIDEO_ID
	// https://youtu.be/VIDEO_ID
	// https://youtube.com/watch?v=VIDEO_ID&feature=shared
	
	re := regexp.MustCompile(`(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([a-zA-Z0-9_-]{11})`)
	matches := re.FindStringSubmatch(url)
	if len(matches) > 1 {
		return matches[1]
	}
	return ""
}

// fixUTF8Encoding –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–æ–∫–∏
// getPopularCachedVideos –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
func (b *LocalBot) getPopularCachedVideos(limit int) ([]services.VideoCache, error) {
	return b.cacheService.GetPopularVideos(limit)
}

// isVideoInCache –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ
func (b *LocalBot) isVideoInCache(videoID, platform string) (bool, []services.VideoCache, error) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
	inCache, cachedFormats, err := b.cacheService.GetVideoFormats(videoID, platform)
	if err != nil || !inCache {
		return false, nil, err
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
	var existingFormats []services.VideoCache
	for _, format := range cachedFormats {
		if _, err := os.Stat(format.FilePath); err == nil {
			log.Printf("‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ: %s", format.FilePath)
			existingFormats = append(existingFormats, format)
		} else {
			log.Printf("‚ö†Ô∏è –§–∞–π–ª –≤ –∫—ç—à–µ –Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", format.FilePath)
		}
	}
	
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º true —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
	return len(existingFormats) > 0, existingFormats, nil
}

// convertWebmToMp3 –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WebM –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ MP3 –∏—Å–ø–æ–ª—å–∑—É—è ffmpeg
func (b *LocalBot) convertWebmToMp3(webmPath string) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è MP3 —Ñ–∞–π–ª–∞, —É–±–∏—Ä–∞—è –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è—è .mp3
	basePath := strings.TrimSuffix(webmPath, ".webm")
	basePath = strings.TrimSuffix(basePath, ".mp4") // –£–±–∏—Ä–∞–µ–º .mp4 –µ—Å–ª–∏ –µ—Å—Ç—å
	mp3Path := basePath + ".mp3"
	
	// –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ
	cmd := exec.Command("ffmpeg", 
		"-i", webmPath,
		"-vn", // –ë–µ–∑ –≤–∏–¥–µ–æ
		"-acodec", "mp3",
		"-ab", "192k", // –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
		"-ar", "44100", // –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
		"-y", // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		mp3Path)
	
	log.Printf("üéµ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∞—É–¥–∏–æ: %s", strings.Join(cmd.Args, " "))
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ ffmpeg (–∞—É–¥–∏–æ): %s", string(output))
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebM –≤ MP3: %v", err)
	}
	
	// –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π WebM —Ñ–∞–π–ª
	if err := os.Remove(webmPath); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å WebM —Ñ–∞–π–ª %s: %v", webmPath, err)
	}
	
	log.Printf("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s -> %s", webmPath, mp3Path)
	return mp3Path, nil
}

// convertWebmToMp4 –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WebM —Ñ–∞–π–ª –≤ MP4 –∏—Å–ø–æ–ª—å–∑—É—è ffmpeg
func (b *LocalBot) convertWebmToMp4(webmPath string) (string, error) {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è MP4 —Ñ–∞–π–ª–∞
	mp4Path := strings.TrimSuffix(webmPath, ".webm") + ".mp4"
	
	// –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
	cmd := exec.Command("ffmpeg", 
		"-i", webmPath,
		"-c:v", "libx264",
		"-c:a", "aac",
		"-preset", "fast",
		"-crf", "23",
		"-y", // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		mp4Path)
	
	log.Printf("üé¨ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é: %s", strings.Join(cmd.Args, " "))
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ ffmpeg: %s", string(output))
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebM –≤ MP4: %v", err)
	}
	
	// –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π WebM —Ñ–∞–π–ª
	if err := os.Remove(webmPath); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å WebM —Ñ–∞–π–ª %s: %v", webmPath, err)
	}
	
	log.Printf("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s -> %s", webmPath, mp4Path)
	return mp4Path, nil
}

func fixUTF8Encoding(s string) string {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞ UTF-8
	if utf8.ValidString(s) {
		return s
	}
	
	// –ï—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞, –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	var result strings.Builder
	for _, r := range s {
		if utf8.ValidRune(r) {
			result.WriteRune(r)
		} else {
			result.WriteRune('?')
		}
	}
	return result.String()
}

// createVideoCaption —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π caption –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
func (b *LocalBot) createVideoCaption(metadata *services.VideoMetadata, formatID, resolution string) string {
	// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
	description := metadata.Description
	if len(description) > 200 {
		description = description[:200] + "..."
	}
	
	// –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π caption –∫–∞–∫ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
	caption := fmt.Sprintf(`üé¨ %s

üë§ –ê–≤—Ç–æ—Ä: %s
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s
üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: %s
üìÖ –î–∞—Ç–∞: %s

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
%s

üé• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: %s

üîó –û—Ä–∏–≥–∏–Ω–∞–ª: %s

ü§ñ –°–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @TubeSaverRuBot`, 
		fixUTF8Encoding(metadata.Title),
		fixUTF8Encoding(metadata.Author),
		fixUTF8Encoding(metadata.Duration),
		fixUTF8Encoding(metadata.Views),
		fixUTF8Encoding(metadata.UploadDate),
		fixUTF8Encoding(description),
		fixUTF8Encoding(resolution),
		metadata.OriginalURL)
	
	return caption
}

// validateVideoFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
func (b *LocalBot) validateVideoFile(videoPath string) bool {
	// –ó–∞—â–∏—Ç–∞ –æ—Ç path traversal
	if !b.isSafePath(videoPath) {
		log.Printf("‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: %s", videoPath)
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(videoPath); os.IsNotExist(err) {
		log.Printf("‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", videoPath)
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 2GB –¥–ª—è Telegram)
	fileInfo, err := os.Stat(videoPath)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: %v", err)
		return false
	}
	
	// Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 2GB = 2 * 1024 * 1024 * 1024 –±–∞–π—Ç
	maxSize := int64(2 * 1024 * 1024 * 1024)
	if fileInfo.Size() > maxSize {
		log.Printf("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: %d –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º %d)", fileInfo.Size(), maxSize)
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	ext := strings.ToLower(filepath.Ext(videoPath))
	allowedExts := []string{".mp4", ".avi", ".mov", ".mkv", ".m4v", ".mp3", ".m4a", ".ogg", ".webm"}
	isValidExt := false
	for _, allowedExt := range allowedExts {
		if ext == allowedExt {
			isValidExt = true
			break
		}
	}
	
	if !isValidExt {
		log.Printf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: %s", ext)
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
	if fileInfo.Size() == 0 {
		log.Printf("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π: %s", videoPath)
		return false
	}
	
	log.Printf("‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: %s (%d –±–∞–π—Ç)", videoPath, fileInfo.Size())
	return true
}

// isSafePath –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç path traversal)
func (b *LocalBot) isSafePath(path string) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ path traversal –∞—Ç–∞–∫–∏
	if strings.Contains(path, "..") || strings.Contains(path, "//") {
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	cleanPath := filepath.Clean(path)
	downloadDir := "./downloads"
	
	// –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
	absPath, err := filepath.Abs(cleanPath)
	if err != nil {
		return false
	}
	
	absDownloadDir, err := filepath.Abs(downloadDir)
	if err != nil {
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ download –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	return strings.HasPrefix(absPath, absDownloadDir)
}

// validateURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å URL
func (b *LocalBot) validateURL(url string) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É URL
	if len(url) > 2048 {
		log.Printf("‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: %d —Å–∏–º–≤–æ–ª–æ–≤", len(url))
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	suspiciousChars := []string{"<", ">", "\"", "'", "&", "script", "javascript", "data:"}
	for _, char := range suspiciousChars {
		if strings.Contains(strings.ToLower(url), char) {
			log.Printf("‚ùå URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: %s", char)
			return false
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ YouTube URL
	if !strings.Contains(url, "youtube.com") && !strings.Contains(url, "youtu.be") {
		log.Printf("‚ùå URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube —Å—Å—ã–ª–∫–æ–π: %s", url)
		return false
	}
	
	return true
}

// sanitizeInput –æ—á–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
func (b *LocalBot) sanitizeInput(input string) string {
	// –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	dangerousChars := []string{"<", ">", "\"", "'", "&", "script", "javascript", "data:", "file:", "ftp:"}
	result := input
	
	for _, char := range dangerousChars {
		result = strings.ReplaceAll(strings.ToLower(result), char, "")
	}
	
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
	if len(result) > 1000 {
		result = result[:1000]
	}
	
	return strings.TrimSpace(result)
}

// extractResolutionNumber –∏–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
func extractResolutionNumber(resolution string) int {
	// –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "256x144" -> 256)
	re := regexp.MustCompile(`(\d+)`)
	matches := re.FindStringSubmatch(resolution)
	if len(matches) > 1 {
		if num, err := strconv.ParseFloat(matches[1], 64); err == nil {
			return int(num)
		}
	}
	return 0
}

// isValidVideoURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –ª—é–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
func isValidVideoURL(url string) bool {
	// –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
	if len(url) < 10 {
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ YouTube –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
	supportedPatterns := []string{
		"youtube.com", "youtu.be",           // YouTube
	}
	
	for _, pattern := range supportedPatterns {
		if strings.Contains(url, pattern) {
			return true
		}
	}
	
	return false
}

// HealthCheck –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
func HealthCheck(youtubeService *services.YouTubeService, cacheService *services.CacheService) map[string]string {
	health := make(map[string]string)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º yt-dlp
	if err := youtubeService.CheckYtDlp(); err != nil {
		health["yt-dlp"] = "‚ùå " + err.Error()
	} else {
		health["yt-dlp"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := youtubeService.CheckNetwork(); err != nil {
		health["network"] = "‚ùå " + err.Error()
	} else {
		health["network"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à-—Å–µ—Ä–≤–∏—Å
	if cacheService != nil {
		health["cache"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
	} else {
		health["cache"] = "‚ö†Ô∏è –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API
	health["telegram"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
	
	return health
}

// CleanupCache –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞
func CleanupCache(bot *LocalBot) {
	log.Println("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...")
	
	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
	if err := bot.cacheService.CleanupOldFiles(); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã: %v", err)
	}
	
	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
	clearedChats := 0
	for chatID, lastTime := range bot.lastRequestTime {
		if time.Since(lastTime) > 24*time.Hour {
			bot.clearCacheForChat(chatID)
			clearedChats++
		}
	}
	
	if clearedChats > 0 {
		log.Printf("üßπ –û—á–∏—â–µ–Ω–æ %d –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ –∫—ç—à–∞", clearedChats)
	}
	
	log.Printf("üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: %d —á–∞—Ç–æ–≤, %d URL, %d –ø–ª–∞—Ç—Ñ–æ—Ä–º", 
		len(bot.formatCache), len(bot.videoURLCache), len(bot.platformCache))
}

// UpdateMetrics –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞
func (b *LocalBot) UpdateMetrics(requestType string, success bool, duration time.Duration) {
	b.metrics.TotalRequests++
	b.metrics.LastActivity = time.Now()
	
	if success {
		b.metrics.SuccessfulRequests++
		if requestType == "download" {
			b.metrics.TotalDownloads++
		}
	} else {
		b.metrics.FailedRequests++
		b.metrics.TotalErrors++
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
	if b.metrics.TotalRequests > 0 {
		totalDuration := b.metrics.AverageResponseTime * time.Duration(b.metrics.TotalRequests-1)
		b.metrics.AverageResponseTime = (totalDuration + duration) / time.Duration(b.metrics.TotalRequests)
	}
}

// GetMetrics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞
func (b *LocalBot) GetMetrics() *BotMetrics {
	return b.metrics
}

// GetUptime –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
func (b *LocalBot) GetUptime() time.Duration {
	return time.Since(b.metrics.StartTime)
}

// IsAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (b *LocalBot) IsAdmin(userID int64) bool {
	return b.adminIDs[userID]
}

// formatDuration —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func formatDuration(d time.Duration) string {
	if d < time.Minute {
		return fmt.Sprintf("%.0f —Å–µ–∫", d.Seconds())
	} else if d < time.Hour {
		return fmt.Sprintf("%.0f –º–∏–Ω", d.Minutes())
	} else if d < 24*time.Hour {
		return fmt.Sprintf("%.1f —á", d.Hours())
	} else {
		days := int(d.Hours() / 24)
		hours := int(d.Hours()) % 24
		return fmt.Sprintf("%d –¥–Ω %d —á", days, hours)
	}
}

// formatTime —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func formatTime(t time.Time) string {
	now := time.Now()
	diff := now.Sub(t)
	
	if diff < time.Minute {
		return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
	} else if diff < time.Hour {
		return fmt.Sprintf("%.0f –º–∏–Ω –Ω–∞–∑–∞–¥", diff.Minutes())
	} else if diff < 24*time.Hour {
		return fmt.Sprintf("%.0f —á –Ω–∞–∑–∞–¥", diff.Hours())
	} else {
		return t.Format("02.01.2006 15:04")
	}
}

// loadLastOffset –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π offset –∏–∑ —Ñ–∞–π–ª–∞
func loadLastOffset() int64 {
	offsetFile := "last_offset.txt"
	if _, err := os.Stat(offsetFile); os.IsNotExist(err) {
		log.Printf("üìÇ –§–∞–π–ª offset –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞—é —Å 0")
		return 0
	}
	
	data, err := os.ReadFile(offsetFile)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è offset: %v", err)
		return 0
	}
	
	offsetStr := strings.TrimSpace(string(data))
	offset, err := strconv.ParseInt(offsetStr, 10, 64)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ offset: %v", err)
		return 0
	}
	
	log.Printf("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π offset: %d", offset)
	return offset
}

// saveLastOffset —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç offset –≤ —Ñ–∞–π–ª
func saveLastOffset(offset int64) {
	offsetFile := "last_offset.txt"
	err := os.WriteFile(offsetFile, []byte(fmt.Sprintf("%d", offset)), 0644)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è offset: %v", err)
	}
}
