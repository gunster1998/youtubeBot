package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"syscall"
	"time"

	"youtubeBot/config"
	"youtubeBot/services"
)

// LocalBot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º Telegram API
type LocalBot struct {
	Token    string
	APIURL   string
	Client   *http.Client
	Username string
	FirstName string
	// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ —á–∞—Ç–∞–º
	formatCache map[int64][]services.VideoFormat
	// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL –≤–∏–¥–µ–æ –ø–æ —á–∞—Ç–∞–º
	videoURLCache map[int64]string
	// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube
	youtubeService *services.YouTubeService
	// –°–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ
	cacheService *services.CacheService
}

// NewLocalBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LocalBot
func NewLocalBot(token, apiURL string, timeout time.Duration, youtubeService *services.YouTubeService, cacheService *services.CacheService) *LocalBot {
	return &LocalBot{
		Token:  token,
		APIURL: apiURL,
		Client: &http.Client{
			Timeout: timeout,
		},
		formatCache: make(map[int64][]services.VideoFormat),
		videoURLCache: make(map[int64]string),
		youtubeService: youtubeService,
		cacheService: cacheService,
	}
}

// GetMe –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
func (b *LocalBot) GetMe() error {
	resp, err := b.Client.Get(fmt.Sprintf("%s/bot%s/getMe", b.APIURL, b.Token))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getMe: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å getMe: %d", resp.StatusCode)
	}

	var result struct {
		OK     bool `json:"ok"`
		Result struct {
			Username  string `json:"username"`
			FirstName string `json:"first_name"`
		} `json:"result"`
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if err := json.Unmarshal(body, &result); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	if !result.OK {
		return fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
	}

	b.Username = result.Result.Username
	b.FirstName = result.Result.FirstName
	return nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *LocalBot) SendMessage(chatID int64, text string) error {
	message := map[string]interface{}{
		"chat_id": chatID,
		"text":    text,
	}

	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendMessage: %d", resp.StatusCode)
	}

	return nil
}

// ClearChatHistory –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞)
func (b *LocalBot) ClearChatHistory(chatID int64) error {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
	updates, err := b.GetUpdates(0, 100, 0)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
	for _, update := range updates {
		if update.Message != nil && update.Message.Chat.ID == chatID {
			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
			deleteMessage := map[string]interface{}{
				"chat_id":    chatID,
				"message_id": update.Message.MessageID,
			}

			jsonData, err := json.Marshal(deleteMessage)
			if err != nil {
				continue
			}

			resp, err := b.Client.Post(
				fmt.Sprintf("%s/bot%s/deleteMessage", b.APIURL, b.Token),
				"application/json",
				bytes.NewBuffer(jsonData),
			)
			if err != nil {
				continue
			}
			resp.Body.Close()
		}
	}

	log.Printf("üßπ –û—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ %d", chatID)
	return nil
}

// SendVideo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª
func (b *LocalBot) SendVideo(chatID int64, videoPath, caption string) error {
	file, err := os.Open(videoPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	// –°–æ–∑–¥–∞–µ–º multipart form
	var buf bytes.Buffer
	writer := multipart.NewWriter(&buf)

	// –î–æ–±–∞–≤–ª—è–µ–º chat_id
	writer.WriteField("chat_id", fmt.Sprintf("%d", chatID))
	
	// –î–æ–±–∞–≤–ª—è–µ–º caption –µ—Å–ª–∏ –µ—Å—Ç—å
	if caption != "" {
		writer.WriteField("caption", caption)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	part, err := writer.CreateFormFile("video", filepath.Base(videoPath))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è form file: %v", err)
	}

	_, err = io.Copy(part, file)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	writer.Close()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendVideo", b.APIURL, b.Token),
		writer.FormDataContentType(),
		&buf,
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å sendVideo: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
	}

	return nil
}

// GetUpdates –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
func (b *LocalBot) GetUpdates(offset, limit, timeout int) ([]Update, error) {
	resp, err := b.Client.Get(fmt.Sprintf("%s/bot%s/getUpdates?offset=%d&limit=%d&timeout=%d", 
		b.APIURL, b.Token, offset, limit, timeout))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getUpdates: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å getUpdates: %d", resp.StatusCode)
	}

	var result struct {
		OK     bool     `json:"ok"`
		Result []Update `json:"result"`
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	if !result.OK {
		return nil, fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
	}

	return result.Result, nil
}

// SendFormatTypeMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ)
func (b *LocalBot) SendFormatTypeMenu(chatID int64, audioCount, videoCount int) error {
	log.Printf("üéØ –°–æ–∑–¥–∞—é –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞: –∞—É–¥–∏–æ=%d, –≤–∏–¥–µ–æ=%d", audioCount, videoCount)
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
	var keyboard [][]map[string]interface{}
	
	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	if audioCount > 0 {
		log.Printf("üéµ –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (%d)", audioCount)
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          "üéµ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã",
				"callback_data": "type_audio",
			},
		})
	} else {
		log.Printf("‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–µ—Ç, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è")
	}
	
	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	if videoCount > 0 {
		log.Printf("üé• –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (%d)", videoCount)
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          "üé• –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã",
				"callback_data": "type_video",
			},
		})
	} else {
		log.Printf("‚ö†Ô∏è –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–µ—Ç, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è")
	}
	
	// –ö–Ω–æ–ø–∫–∞ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ" - —É–±–∏—Ä–∞–µ–º –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	// log.Printf("‚ö° –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
	// keyboard = append(keyboard, []map[string]interface{}{
	// 	{
	// 		"text":          "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ (–∏–∑ –∫—ç—à–∞)",
	// 		"callback_data": "instant_best",
	// 	},
	// })
	
	log.Printf("üìã –ò—Ç–æ–≥–æ–≤—ã–π keyboard: %d –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ)", len(keyboard))
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// SendVideoFormatsOnly –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
func (b *LocalBot) SendVideoFormatsOnly(chatID int64, text string, formats []services.VideoFormat) error {
	log.Printf("üé• –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã (%d —à—Ç—É–∫)", len(formats))
	
	// –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
	log.Printf("üîç –î–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é:")
	for i, f := range formats {
		log.Printf("  üé• %d. ID: %s, Resolution: %s, Extension: %s, HasAudio: %v, Size: %s", 
			i+1, f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
	}
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
		icon := "üé•"
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ" - —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (%d –∫–Ω–æ–ø–æ–∫)", len(keyboard))
	return nil
}

// SendAudioFormatsOnly –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
func (b *LocalBot) SendAudioFormatsOnly(chatID int64, text string, formats []services.VideoFormat) error {
	log.Printf("üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã (%d —à—Ç—É–∫)", len(formats))
	
	// –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
	log.Printf("üîç –î–µ—Ç–∞–ª–∏ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é:")
	for i, f := range formats {
		log.Printf("  üéµ %d. ID: %s, Resolution: %s, Extension: %s, HasAudio: %v, Size: %s", 
			i+1, f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
	}
	
	// –°–æ–∑–¥–∞–µ–º inline keyboard —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–æ–∫ –¥–ª—è –∞—É–¥–∏–æ
		icon := "üéµ"
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ" - —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	log.Printf("‚úÖ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (%d –∫–Ω–æ–ø–æ–∫)", len(keyboard))
	return nil
}

// SendInlineKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline keyboard
func (b *LocalBot) SendInlineKeyboard(chatID int64, text string, formats []services.VideoFormat, videoURL string) error {
	// –°–æ–∑–¥–∞–µ–º inline keyboard
	var keyboard [][]map[string]interface{}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	for _, format := range formats {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
		icon := "üé•"
		
		buttonText := fmt.Sprintf("%s %s / %s", icon, format.Resolution, format.FileSize)
		if format.FileSize == "" {
			buttonText = fmt.Sprintf("%s %s / ~?", icon, format.Resolution)
		}
		
		// –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏
		callbackData := fmt.Sprintf("format_%s_%s", format.ID, format.Resolution)
		
		keyboard = append(keyboard, []map[string]interface{}{
			{
				"text":          buttonText,
				"callback_data": callbackData,
			},
		})
	}
	
	// –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ" –≤ –ø–æ–¥–º–µ–Ω—é —Ñ–æ—Ä–º–∞—Ç–æ–≤
	// –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å keyboard
	message := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": map[string]interface{}{"inline_keyboard": keyboard},
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ keyboard: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/sendMessage", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ keyboard: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	return nil
}

// AnswerCallbackQuery –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
func (b *LocalBot) AnswerCallbackQuery(callbackID string) error {
	message := map[string]interface{}{
		"callback_query_id": callbackID,
	}
	
	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ callback answer: %v", err)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := b.Client.Post(
		fmt.Sprintf("%s/bot%s/answerCallbackQuery", b.APIURL, b.Token),
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å callback answer: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}
	
	return nil
}

// Update –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
type Update struct {
	UpdateID int64   `json:"update_id"`
	Message  *Message `json:"message,omitempty"`
	CallbackQuery *CallbackQuery `json:"callback_query,omitempty"`
}

// CallbackQuery –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç callback –æ—Ç inline keyboard
type CallbackQuery struct {
	ID   string  `json:"id"`
	Data string  `json:"data"`
	Message *Message `json:"message"`
}

// Message –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
type Message struct {
	MessageID int64  `json:"message_id"`
	Text      string `json:"text"`
	Chat      Chat   `json:"chat"`
}

// Chat –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ Telegram
type Chat struct {
	ID int64 `json:"id"`
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.Load("config.env")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
	if cfg.TelegramToken == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.env")
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º Telegram API: %s\n", cfg.TelegramAPI)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º yt-dlp
	youtubeService := services.NewYouTubeService(cfg.DownloadDir)
	if err := youtubeService.CheckYtDlp(); err != nil {
		log.Fatalf("‚ùå %v", err)
	}
	fmt.Println("‚úÖ yt-dlp –¥–æ—Å—Ç—É–ø–µ–Ω")

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (20 –ì–ë) - —Ä—è–¥–æ–º —Å –∫–æ—Ä–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞
	cacheService, err := services.NewCacheService("../cache", 20)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à-—Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}
	defer cacheService.Close()
	
	// –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
	bot := NewLocalBot(cfg.TelegramToken, cfg.TelegramAPI, time.Duration(cfg.HTTPTimeout)*time.Second, youtubeService, cacheService)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Telegram API
	if err := bot.GetMe(); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Telegram API: %v", err)
	}

	fmt.Printf("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @%s (%s)\n", bot.Username, bot.FirstName)
	fmt.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: %s\n", cfg.TelegramAPI)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := youtubeService.CheckNetwork(); err != nil {
		log.Printf("‚ö†Ô∏è %v", err)
		fmt.Println("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é - –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
	} else {
		fmt.Println("‚úÖ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
	}

	fmt.Println("üé¨ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ getUpdates
	log.Printf("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ getUpdates...")
	
	offset := int64(0)
	for {
		select {
		case <-sigChan:
			fmt.Printf("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...\n")
			return
		default:
			// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			updates, err := bot.GetUpdates(int(offset), 100, 30)
			if err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
				time.Sleep(5 * time.Second)
				continue
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			for _, update := range updates {
				if update.UpdateID >= offset {
					offset = update.UpdateID + 1
				}

				if update.Message != nil {
					message := update.Message
					log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s –æ—Ç —á–∞—Ç–∞ %d", message.Text, message.Chat.ID)
					
					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
					if message.Text == "/start" {
						bot.SendMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
					} else if len(message.Text) > 10 && (strings.Contains(message.Text, "youtube.com") || strings.Contains(message.Text, "youtu.be")) {
						// YouTube —Å—Å—ã–ª–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
						log.Printf("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é YouTube —Å—Å—ã–ª–∫—É: %s", message.Text)
						
						go func() {
							// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –í–ù–£–¢–†–ò –≥–æ—Ä—É—Ç–∏–Ω—ã
							delete(bot.formatCache, message.Chat.ID)
							delete(bot.videoURLCache, message.Chat.ID)
							log.Printf("üóëÔ∏è –û—á–∏—Å—Ç–∏–ª —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è —á–∞—Ç–∞ %d", message.Chat.ID)
							
							// –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞)
							if err := bot.ClearChatHistory(message.Chat.ID); err != nil {
								log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞: %v", err)
							}
							
							log.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è: %s", message.Text)
							bot.SendMessage(message.Chat.ID, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ...")
							
							// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤
							log.Printf("üìã –í—ã–∑—ã–≤–∞—é GetVideoFormats...")
							formats, err := youtubeService.GetVideoFormats(message.Text)
							if err != nil {
								log.Printf("‚ùå –û—à–∏–±–∫–∞ GetVideoFormats: %v", err)
								bot.SendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤: %v", err))
								return
							}
							
							log.Printf("üìä –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: %d", len(formats))
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
							cachedURL := bot.videoURLCache[message.Chat.ID]
							if cachedURL != "" && cachedURL != message.Text {
								log.Printf("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: URL –≤ –∫—ç—à–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É!")
								log.Printf("  –ö—ç—à: %s", cachedURL)
								log.Printf("  –¢–µ–∫—É—â–∏–π: %s", message.Text)
								// –û—á–∏—â–∞–µ–º –∫—ç—à –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π URL
								delete(bot.formatCache, message.Chat.ID)
								delete(bot.videoURLCache, message.Chat.ID)
								log.Printf("üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏–ª –∫—ç—à –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è URL")
							}
							
							// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö
							log.Printf("üîç –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:")
							for i, f := range formats {
								log.Printf("  %d. ID: %s, Extension: %s, Resolution: %s, HasAudio: %v, Size: %s", 
									i+1, f.ID, f.Extension, f.Resolution, f.HasAudio, f.FileSize)
							}
							
							if len(formats) == 0 {
								log.Printf("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
								bot.SendMessage(message.Chat.ID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
								return
							}
							
							// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∏ URL –≤ –∫—ç—à–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
							bot.formatCache[message.Chat.ID] = formats
							bot.videoURLCache[message.Chat.ID] = message.Text
							log.Printf("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª –≤ –∫—ç—à: %d —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ URL: %s –¥–ª—è —á–∞—Ç–∞ %d", len(formats), message.Text, message.Chat.ID)
							
							// –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ
							var audioFormats []services.VideoFormat
							var videoFormats []services.VideoFormat
							
							log.Printf("üîç –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ %d —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ", len(formats))
							
							// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
							resolutionGroups := make(map[string][]services.VideoFormat)
							
							for _, format := range formats {
								log.Printf("üîç –†–∞–∑–¥–µ–ª—è—é —Ñ–æ—Ä–º–∞—Ç: %s %s %s (—Ç–∏–ø: %s, –∞—É–¥–∏–æ: %v)", 
									format.ID, format.Resolution, format.Extension, format.Extension, format.HasAudio)
								if format.Extension == "audio" {
									audioFormats = append(audioFormats, format)
									log.Printf("üéµ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—É–¥–∏–æ: %s", format.ID)
								} else {
									// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
									resolutionGroups[format.Resolution] = append(resolutionGroups[format.Resolution], format)
								}
							}
							
							// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û —Ñ–æ—Ä–º–∞—Ç—ã –° –ê–£–î–ò–û
							for resolution, formats := range resolutionGroups {
								if len(formats) == 0 {
									continue
								}
								
								// –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
								var audioFormat *services.VideoFormat
								for _, f := range formats {
									if f.HasAudio {
										audioFormat = &f
										break
									}
								}
								
								// –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ
								if audioFormat != nil {
									videoFormats = append(videoFormats, *audioFormat)
									log.Printf("üé• –î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ–æ: %s (%s) - %s (–∞—É–¥–∏–æ: true)", 
										audioFormat.ID, audioFormat.Resolution, audioFormat.FileSize)
								} else {
									log.Printf("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ %s - –Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ", resolution)
								}
							}
							
							log.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d –∞—É–¥–∏–æ –∏ %d –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤", len(audioFormats), len(videoFormats))
							
							// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
							if len(videoFormats) <= 1 {
								log.Printf("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—è—é –¥–µ—Ç–∞–ª–∏:")
								for i, f := range videoFormats {
									log.Printf("  üé• %d. ID: %s, Resolution: %s, Extension: %s, HasAudio: %v, Size: %s", 
										i+1, f.ID, f.Resolution, f.Extension, f.HasAudio, f.FileSize)
								}
							}
							
							// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ –∑–≤—É–∫–æ–º
							videoWithAudio := 0
							for _, f := range videoFormats {
								if f.HasAudio {
									videoWithAudio++
								}
							}
							log.Printf("üéµ –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ –∑–≤—É–∫–æ–º: %d –∏–∑ %d", videoWithAudio, len(videoFormats))
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã —Å –∞—É–¥–∏–æ
							if len(videoFormats) == 0 {
								log.Printf("‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ!")
								bot.SendMessage(message.Chat.ID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")
								return
							}
							
							// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
							sortVideoFormatsByResolution(videoFormats)
							
							// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
							if len(audioFormats) == 0 {
								log.Printf("‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
								for i, f := range formats {
									log.Printf("  %d. ID: %s, Extension: '%s', Resolution: %s, HasAudio: %v", 
										i+1, f.ID, f.Extension, f.Resolution, f.HasAudio)
								}
							}
							
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
							if err := bot.SendFormatTypeMenu(message.Chat.ID, len(audioFormats), len(videoFormats)); err != nil {
								log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞: %v", err)
								bot.SendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞")
							}
							
							// –ù–ï —Å–∫–∞—á–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∂–¥–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
							log.Printf("‚è∏Ô∏è –û–∂–∏–¥–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
						}()
					} else if message.Text == "best" || message.Text == "1" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç - —Å–∫–∞—á–∏–≤–∞–µ–º
						log.Printf("üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç: %s", message.Text)
						
						bot.SendMessage(message.Chat.ID, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ...")
						
						// TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å URL –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
						// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
						bot.SendMessage(message.Chat.ID, "üöß –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ —Å–∫–∞—á–∏–≤–∞—é –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.")
					} else {
						bot.SendMessage(message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
					}
				} else if update.CallbackQuery != nil {
					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç inline keyboard
					callback := update.CallbackQuery
					log.Printf("üéØ –ü–æ–ª—É—á–µ–Ω callback: %s", callback.Data)
					
					if callback.Data == "type_audio" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã
						log.Printf("üéµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã")
						bot.AnswerCallbackQuery(callback.ID)
						
						// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
						formats := bot.formatCache[callback.Message.Chat.ID]
						var audioFormats []services.VideoFormat
						for _, format := range formats {
							if format.Extension == "audio" {
								audioFormats = append(audioFormats, format)
							}
						}
						
						log.Printf("üéµ –ù–∞–π–¥–µ–Ω–æ %d –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞", len(audioFormats))
						
						if len(audioFormats) > 0 {
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
							bot.SendAudioFormatsOnly(callback.Message.Chat.ID, "üéµ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã:", audioFormats)
						} else {
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
						}
						
					} else if callback.Data == "type_video" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
						log.Printf("üé• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã")
						bot.AnswerCallbackQuery(callback.ID)
						
						// –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –∫—ç—à–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
						formats := bot.formatCache[callback.Message.Chat.ID]
						log.Printf("üîç –ü—Ä–∏–º–µ–Ω—è—é —É–º–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –¥–ª—è %d —Ñ–æ—Ä–º–∞—Ç–æ–≤", len(formats))
						
						// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
						resolutionGroups := make(map[string][]services.VideoFormat)
						
						for _, format := range formats {
							if format.Extension != "audio" {
								// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
								resolutionGroups[format.Resolution] = append(resolutionGroups[format.Resolution], format)
							}
						}
						
						// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ–º –õ–£–ß–®–ò–ô —Ñ–æ—Ä–º–∞—Ç
						var videoFormats []services.VideoFormat
						for resolution, formatList := range resolutionGroups {
							if len(formatList) == 0 {
								continue
							}
							
							// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
							sort.Slice(formatList, func(i, j int) bool {
								sizeI := parseFileSize(formatList[i].FileSize)
								sizeJ := parseFileSize(formatList[j].FileSize)
								return sizeI < sizeJ
							})
							
							// –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
							var bestFormat *services.VideoFormat
							
							// –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ
							for _, f := range formatList {
								if f.HasAudio {
									bestFormat = &f
									log.Printf("üéµ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Å –∞—É–¥–∏–æ –¥–ª—è %s: %s (%s)", 
										resolution, f.ID, f.FileSize)
									break
								}
							}
							
							// –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å –∞—É–¥–∏–æ, –±–µ—Ä–µ–º —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π
							if bestFormat == nil {
								bestFormat = &formatList[0]
								log.Printf("üìπ –ù–µ—Ç –∞—É–¥–∏–æ –¥–ª—è %s, –±–µ—Ä—É —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π: %s (%s)", 
									resolution, bestFormat.ID, bestFormat.FileSize)
							}
							
							// –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç
							videoFormats = append(videoFormats, *bestFormat)
							log.Printf("üé• –î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ–æ: %s (%s) - %s (–∞—É–¥–∏–æ: %v)", 
								bestFormat.ID, bestFormat.Resolution, bestFormat.FileSize, bestFormat.HasAudio)
						}
						
						// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
						sortVideoFormatsByResolution(videoFormats)
						
						if len(videoFormats) > 0 {
							log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ", len(videoFormats))
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
							bot.SendVideoFormatsOnly(callback.Message.Chat.ID, "üé• –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã:", videoFormats)
						} else {
							log.Printf("‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ!")
							bot.SendMessage(callback.Message.Chat.ID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")
						}
						
					} else if strings.HasPrefix(callback.Data, "format_") {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç
						parts := strings.Split(callback.Data, "_")
						if len(parts) >= 2 {
							formatID := parts[1]
							log.Printf("üìπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç: %s", formatID)
							bot.AnswerCallbackQuery(callback.ID)
							bot.SendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s...", formatID))
							
							// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
							go func() {
								log.Printf("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", formatID)
								bot.SendMessage(callback.Message.Chat.ID, "üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
								
															// –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
							videoURL := bot.videoURLCache[callback.Message.Chat.ID]
							if videoURL == "" {
								log.Printf("‚ùå URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –¥–ª—è —á–∞—Ç–∞ %d", callback.Message.Chat.ID)
								bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
								return
							}
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
							if !strings.Contains(videoURL, "youtube.com") && !strings.Contains(videoURL, "youtu.be") {
								log.Printf("‚ùå URL –≤ –∫—ç—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: %s", videoURL)
								bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∫—ç—à–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
								return
							}
							
							// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL –∞–∫—Ç—É–∞–ª–µ–Ω
							log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å URL –≤ –∫—ç—à–µ:")
							log.Printf("  –ö—ç—à: %s", videoURL)
							log.Printf("  –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å: %s", callback.Message.Text)
							
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
							// –ï—Å–ª–∏ URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç - –æ—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ
							if !strings.Contains(videoURL, "youtube.com") && !strings.Contains(videoURL, "youtu.be") {
								log.Printf("‚ùå URL –≤ –∫—ç—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: %s", videoURL)
								bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∫—ç—à–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
								return
							}
							
							log.Printf("üîó –ò—Å–ø–æ–ª—å–∑—É—é URL –∏–∑ –∫—ç—à–∞: %s", videoURL)
								
								if videoURL != "" {
									// –ò–∑–≤–ª–µ–∫–∞–µ–º Video ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
									videoID := extractVideoID(videoURL)
									if videoID == "" {
										log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Video ID –∏–∑ URL: %s", videoURL)
										bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
										return
									}
									
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
									if isCached, cachedVideo, err := bot.cacheService.IsVideoCached(videoID, formatID); err != nil {
										log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: %v", err)
									} else if isCached {
										// –í–∏–¥–µ–æ –≤ –∫—ç—à–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
										log.Printf("‚ö° –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: %s (—Ñ–æ—Ä–º–∞—Ç: %s)", videoID, formatID)
										bot.SendMessage(callback.Message.Chat.ID, "‚ö° –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞...")
										
										// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –∫—ç—à–∞
										if err := bot.SendVideo(callback.Message.Chat.ID, cachedVideo.FilePath, fmt.Sprintf("–í–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s (–∏–∑ –∫—ç—à–∞)", formatID)); err != nil {
											log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞: %v", err)
											bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞")
											return
										}
										
										// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
										bot.cacheService.IncrementDownloadCount(videoID, formatID)
										
										log.Printf("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: %s", formatID)
										bot.SendMessage(callback.Message.Chat.ID, "‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞!")
										return
									}
									
									// –í–∏–¥–µ–æ –Ω–µ –≤ –∫—ç—à–µ - —Å–∫–∞—á–∏–≤–∞–µ–º
									log.Printf("üì• –í–∏–¥–µ–æ –Ω–µ –≤ –∫—ç—à–µ, —Å–∫–∞—á–∏–≤–∞—é: %s", videoURL)
									bot.SendMessage(callback.Message.Chat.ID, "üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
									
									// –†–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ youtubeService
									videoPath, err := bot.youtubeService.DownloadVideoWithFormat(videoURL, formatID)
									if err != nil {
										log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: %v", err)
										bot.SendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: %v", err))
										return
									}
									
									log.Printf("üì• –§–∞–π–ª —Å–∫–∞—á–∞–Ω: %s", videoPath)
									bot.SendMessage(callback.Message.Chat.ID, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –≤ Telegram...")
									
									// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
									fileExt := strings.ToLower(filepath.Ext(videoPath))
									isAudio := fileExt == ".mp3" || fileExt == ".m4a" || fileExt == ".webm" || fileExt == ".ogg"
									
									// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
									if isAudio {
										// –î–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
										if err := bot.SendVideo(callback.Message.Chat.ID, videoPath, fmt.Sprintf("–ê—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", formatID)); err != nil {
											log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %v", err)
											bot.SendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err))
											return
										}
										
										log.Printf("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", formatID)
										bot.SendMessage(callback.Message.Chat.ID, "‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
									} else {
										// –î–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
										if err := bot.SendVideo(callback.Message.Chat.ID, videoPath, fmt.Sprintf("–í–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", formatID)); err != nil {
											log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: %v", err)
											bot.SendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err))
											return
										}
										
										log.Printf("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", formatID)
										bot.SendMessage(callback.Message.Chat.ID, "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
									}
									
									// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ, –Ω–µ –¥–ª—è –∞—É–¥–∏–æ)
									if !isAudio {
										// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
										fileInfo, err := os.Stat(videoPath)
										if err != nil {
											log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: %v", err)
										} else {
											// –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
											formats := bot.formatCache[callback.Message.Chat.ID]
											var resolution string
											for _, f := range formats {
												if f.ID == formatID {
													resolution = f.Resolution
													break
												}
											}
											
											// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
											if err := bot.cacheService.AddToCache(videoID, videoURL, "YouTube Video", formatID, resolution, videoPath, fileInfo.Size()); err != nil {
												log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫—ç—à: %v", err)
											} else {
												log.Printf("üíæ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—ç—à: %s (%s)", videoID, formatID)
											}
										}
									}
								} else {
									log.Printf("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω URL –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ %s", formatID)
									bot.SendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
								}
							}()
						}
					} else if callback.Data == "instant_best" {
						// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
						log.Printf("‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
						bot.AnswerCallbackQuery(callback.ID)
						bot.SendMessage(callback.Message.Chat.ID, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ...")
						
						// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
						go func() {
							log.Printf("üöÄ –ù–∞—á–∏–Ω–∞—é –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ")
							bot.SendMessage(callback.Message.Chat.ID, "üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
							
							// TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
							// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
							log.Printf("üì• –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
							bot.SendMessage(callback.Message.Chat.ID, "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
						}()
					}
				}
			}

			// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
			time.Sleep(1 * time.Second)
		}
	}
}

// parseFileSize –ø–∞—Ä—Å–∏—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç—ã
func parseFileSize(fileSize string) int64 {
	if fileSize == "" {
		return 0
	}
	
	// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
	fileSize = strings.TrimSpace(fileSize)
	
	// –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
	var multiplier float64 = 1
	var sizeStr string
	
	if strings.HasSuffix(fileSize, "GiB") {
		multiplier = 1024 * 1024 * 1024
		sizeStr = strings.TrimSuffix(fileSize, "GiB")
	} else if strings.HasSuffix(fileSize, "MiB") {
		multiplier = 1024 * 1024
		sizeStr = strings.TrimSuffix(fileSize, "MiB")
	} else if strings.HasSuffix(fileSize, "KiB") {
		multiplier = 1024
		sizeStr = strings.TrimSuffix(fileSize, "KiB")
	} else if strings.HasSuffix(fileSize, "B") {
		multiplier = 1
		sizeStr = strings.TrimSuffix(fileSize, "B")
	} else {
		// –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
		if size, err := strconv.ParseFloat(fileSize, 64); err == nil {
			return int64(size)
		}
		return 0
	}
	
	if size, err := strconv.ParseFloat(sizeStr, 64); err == nil {
		return int64(size * multiplier)
	}
	
	return 0
}

// sortVideoFormatsByResolution —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
func sortVideoFormatsByResolution(formats []services.VideoFormat) {
	sort.Slice(formats, func(i, j int) bool {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
		resI := extractResolutionNumber(formats[i].Resolution)
		resJ := extractResolutionNumber(formats[j].Resolution)
		return resI < resJ
	})
}

// extractVideoID –∏–∑–≤–ª–µ–∫–∞–µ—Ç YouTube Video ID –∏–∑ URL
func extractVideoID(url string) string {
	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
	// https://www.youtube.com/watch?v=VIDEO_ID
	// https://youtu.be/VIDEO_ID
	// https://youtube.com/watch?v=VIDEO_ID&feature=shared
	
	re := regexp.MustCompile(`(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([a-zA-Z0-9_-]{11})`)
	matches := re.FindStringSubmatch(url)
	if len(matches) > 1 {
		return matches[1]
	}
	return ""
}

// extractResolutionNumber –∏–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
func extractResolutionNumber(resolution string) int {
	// –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "256x144" -> 256)
	re := regexp.MustCompile(`(\d+)`)
	matches := re.FindStringSubmatch(resolution)
	if len(matches) > 1 {
		if num, err := strconv.ParseFloat(matches[1], 64); err == nil {
			return int(num)
		}
	}
	return 0
}
